---
title: "<span style='background-color:DeepSkyBlue'>Introducción al R</span>"
format: 
  html:
    embed-resources: true
    theme:
      dark: cyborg
      light: sketchy
    #theme: journal
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = T)

library(poliscidata)

set.seed(12345)
w <- world[sample(1:nrow(world), 10),]
w <- world
wa <- w[,c("country","gini10","dem_level4","religoin", "spendhealth")]
wb <- w[,c("country","hdi","pop_urban","lifeex_total", "durable")]

w1 <- w[1:83,]
w2 <- w[84:167,]


```

## ¿Qué es el R?

### Video

¿Por qué usar R? Mira este video corto sobre las razones por las que aprender R y responde un cuestionario sobre las ideas principales cubiertas en el video.

{{< video https://www.youtube.com/watch?v=9kYUGMg_14s >}}

Otro video en español {{< video https://www.youtube.com/watch?v=3hR2A2nCI4U >}}

## ¿Qué es el RStudio?

RSudio es un entorno de desarrollo integrado (IDE) para R. Es un programa que te permite escribir y ejecutar código de R de manera más eficiente y efectiva.

El video abajo te dará una introducción a RStudio y explicará sus principales características.

{{< video https://www.youtube.com/watch?v=FIrsOBy5k58 >}}

## Matemática básica en R

### Operadores aritméticos

En R, puedes realizar operaciones matemáticas básicas como suma, resta, multiplicación y división. Los operadores aritméticos básicos en R son:

-   `+` para la suma
-   `-` para la resta
-   `*` para la multiplicación
-   `/` para la división
-   `^` para la potenciación

El R trabaja como una calculadora. Solo escribe la operación y ejecuta el código en un script o en la consola (fragmento de código) para ver los resultados. Por ejemplo, en el fragmento de código a continuación escribe 2+2 y, luego, haz clic en "Ejecutar código":

```{r 06_two-plus-two, exercise=TRUE}

```

El botón "Ejecutar código (Run code)" simula R y ejecuta el comando en un "entorno amigable para el usuario". El resultado es 4. Ahora, prueba una nueva fórmula en la ventana de código: 2\^4:

```{r 07_two-exp-four, exercise=TRUE}

```

El símbolo "\^" representa el signo exponencial. Por lo tanto, 16 es el resultado de 2 elevado a la 4.

Las reglas aritméticas también se aplican para el orden de las operaciones en R. Las multiplicaciones y divisiones se realizan primero, solo después las sumas y restas.

Intenta la siguiente fórmula: 100/4+1 en el fragmento de código:

```{r 08_ari_rules1, exercise=TRUE}

```

El resultado es 100/4 = 25 y, luego, 25+1 = 26. Ahora, prueba esto: 100/(4+1). ¿Qué resultado deberíamos esperar?

```{r 09_ari_rules2, exercise=TRUE}

```

¿Qué mudó? Cuando usamos paréntesis '()' o corchetes '{}', la operación dentro de estos símbolos se resuelve primero. Por lo tanto, en este caso, 100/(4+1) = 100/5 = 20.

## Vectores

Los vectores o variables son conjuntos de valores. Una lista de nombres, la edad de los estudiantes en la clase, las calificaciones obtenidas en todos los cursos, pueden representarse en vectores.

Creemos una variable llamada edad con los valores 18, 19, 24, 35 y 40. En cualquier clase de matemáticas, esto se representaría como un conjunto, siendo edad={18,19,24,35,40}. R funciona de una manera muy similar: un nombre, un símbolo para representar una asignación y la definición de los valores que contendrá este nombre.

El símbolo de asignación en R es "\<-". Por lo tanto, si creo una nueva variable, solo necesito decir, por ejemplo, x \<- 1. Esta expresión crea un nuevo vector (variable) llamado x con el valor de 1. Escribe x \<- 1 en el fragmento de código a continuación:

```{r 10_assiA, exercise=TRUE}

```

Ahora, escribe x \<- 1 en el fragmento de código a continuación y, en la línea siguiente, solo escribe x para recuperar el valor de x:

```{r 11_retA, exercise=TRUE}

```

Podrás ver que nada aparece en el primer fragmento de código, pero el resultado '\[1\] 1' se presenta en el segundo. La razón es que, al escribir solo x, le pedimos a R que muestre todos los valores de x. En este caso, solo 1.

El R también funciona con otros tipos de datos, como texto y fechas. Podemos crear una nueva variable con texto. Creemos una variable/vector llamada ciudad y asignemos "Sevilla" a ella. Recuerda usar el símbolo de asignación '\<-':

```{r 12_city, exercise=TRUE}

```

```{r 12_city-solution}
city <- "Sevilla"
```

Ahora, podemos crear una nueva variable llamada hoy con la fecha de hoy:

```{r 13_today, exercise=TRUE}

```

```{r 13_today-solution}

hoy <- Sys.Date()

```

Hasta ahora, solo trabajamos con un valor para cada vector. Sin embargo, en el análisis de datos reales, las variables contienen miles o incluso millones de valores. Para hacerlo, necesitamos usar la función 'c()' que concatena o combina valores en una misma variable. Las funciones son una parte fundamental de R. Profundizaremos más en ellas en las próximas secciones.

Por ejemplo, podemos asignar los valores de uno a cuatro a una variable llamada a con el siguiente código: "a \<- c(1,2,3,4)" o los nombres de las capitales de provincia de Andalucía con "a \<- c("Huelva", "Cádiz", "Sevilla", "Málaga", "Granada", "Córdoba", "Jaén", "Almería")".

Puedes ver que los nombres o textos siempre están entre comillas. Los números no.

Ahora, es tu turno. Crea una variable llamada 'edad' con los valores 0, 1, 2, 3, 5, 8, 13, 21. Recuerda que los valores deben estar entre paréntesis y separados por comas.

```{r 14_age, exercise=TRUE}

```

```{r 14_age-solution}

edad <- c(0, 1, 2, 3, 5, 8, 13, 21)

```

Ahora, creemos un vector llamado 'iber' que contenga los nombres de los países ubicados en la Península Ibérica (Portugal, España, Andorra y Francia - algunas provincias):

```{r 15_iber, exercise=TRUE}

```

```{r 15_iber-solution}

iber <- c("Portugal", "Spain", "Andorra", "France")

```

Otra gran característica de los vectores es la capacidad de realizar operaciones con ellos muy fácilmente. Imagina un vector a con valores 1, 2, 3, 4 y quiero multiplicarlos por 10. Solo necesito multiplicar a por 10 y la operación se aplica a todos los elementos del vector. Creemos un vector a con los valores anteriores y, luego, multipliquémoslo por 10:

```{r 16_m10, exercise=TRUE}

```

```{r 16_m10-solution}

a <- c(1, 2, 3, 4)

a * 10

```

Podemos ver que el resultado fue 10, 20, 30 y 40. No fue necesario multiplicar cada elemento del vector para obtener los resultados. Cuando se trata de millones de valores, esta característica es realmente útil.

Lo mismo ocurre cuando intentamos hacer operaciones aritméticas entre variables. Creemos dos variables a, con 1,2,3,4, y b, con 10, 20, 30, y 40. Luego, sumémoslas:

```{r 17_madd, exercise=TRUE}

```

```{r 17_madd-solution}

a <- c(1, 2, 3, 4)
b <- c(10, 20, 30, 40)

a + b

```

Ahora, crea las mismas dos variables y divide b por a:

```{r 18_mdiv, exercise=TRUE}

```

```{r 18_mdiv-solution}

a <- c(1, 2, 3, 4)
b <- c(10, 20, 30, 40)

b / a

```

Finalmente, podemos combinar valores de dos vectores diferentes. Imagina que tenemos una variable (cyl) con las capitales de Castilla y León y otra con las de Andalucía (adl). Quiero combinar las dos en la variable "capitales". Solo necesito usar la función c() para combinar las dos de la misma manera que la usé para combinar valores individuales. Intenta hacerlo por ti mismo (y recuerda un poco de geografía española) e inspecciona los resultados:

```{r 19_cap, exercise=TRUE}

```

```{r 19_cap-solution}

cyl <- c("Ávila","Burgos","León","Palencia","Salamanca","Segovia","Soria","Valladolid","Zamora")

adl <- c("Almería","Cádiz","Córdoba","Granada","Huelva","Jaén","Málaga","Sevilla")

capitales <- c(cyl, adl)

capitales

```

## Operadores relacionales y lógicos

Quizás la tarea más importante en el análisis de datos es la comparación. ¿Cuáles son los países más ricos del mundo? ¿Quién gana más de 10 mil euros al mes? ¿Los votantes de Madrid apoyaron más al PP que los de Sevilla? ¿Es el salario mediano de las mujeres el mismo que el de los hombres? Estas son preguntas suelen requerir la comparación de valores para ser respondidas.

El R emplea una serie de operadores relacionales para permitir a los analistas extraer respuestas de los datos. Imagina dos variables, una con los votos al PP en dos ciudades españolas en las últimas cuatro elecciones generales (noviembre 2019, abril 2019, junio 2016 y diciembre 2015): ciudad_A = {29.93,23.53,40.82,36.77}, ciudad_B = {29.88,24.11,41.1,36.15}. Solo mirando los números es difícil decidir cuál de las dos ha mostrado más apoyo al PP en todo el período.

La estadística nos ayuda con esto proporcionando herramientas para la síntesis y comparación. Creemos estos dos vectores en R y, luego, probemos la hipótesis de que la ciudad A presentó un apoyo más fuerte en promedio en comparación con la ciudad B. Necesitamos usar la función mean() y el operador lógico "\>" mayor que para realizar la prueba.

```{r 20_comp, exercise=TRUE}

city_A <- c(29.93,23.53,40.82,36.77)

city_B <- c(29.88,24.11,41.1,36.15)

mean(city_A) > mean(city_B)

```

Los resultados muestran que, por una fracción de porcentaje, la hipótesis es FALSA. La ciudad B es la que ha mostrado un mayor apoyo al PP en las últimas cuatro elecciones generales.

Los operadores relacionales nos ayudan a probar hipótesis, seleccionar información y comparar valores:

-   a `==` b, es a igual b?

-   a `>` b, es a mayor que b? o a `>=`, es a mayor o igual a b?

-   a `<` b, es a menor que b? o a `<=`, es a menor o igual a b?

-   a `!=` b, es a diferente de b

-   a `%in%` b, a contiene b (o los valores de b están contenidos en a)

Los operadores relacionales pueden ser utilizados para filtrar datos o indicar casos que se ajustan a ciertas condiciones. Por ejemplo, en el código a continuación filtramos todos los valores de la variable x que están por encima de 75:

```{r 21_fil1, exercise=TRUE}

x <- c(1:100)

x[x>75]

```

Operadores lógicos, por otro lado, ayudan a establecer condiciones combinadas para la selección o filtrado:

-   `!` - NOT - x\[!x\>75\] - recupera todos los valores menores o iguales a 75.

-   `&` - AND - x\[x\>10 & x\<50\] - selecciona los valores entre 11 y 49.

-   `|` - OR - x\[x\>10 \| x\<50\] - selecciona todos los valores.

Inténtalo tu. Ahora x corresponde a los años entre 1992 y 2021. Selecciona solo aquellos años de 1992 a 2000 y de 2015 a 2021.

```{r 22_fil2, exercise=TRUE}

x <- c(1992:2021)

```

```{r 22_fil2-solution}

x <- c(1992:2021)

x[x<=2000 | x>=2015]

```

Finalmente, selecciona solo los años entre 1995 y 2002.

```{r 23_fil3, exercise=TRUE}

x <- c(1992:2021)

```

```{r 23_fil3-solution}

x <- c(1992:2021)

x[x>1994 & x<2003]

```

Finalmente, selecciona todos los casos por encima de 2000, excepto para 2005 a 2007.

```{r 24_fil4, exercise=TRUE}

x <- c(1992:2021)

```

```{r 24_fil4-solution}

x <- c(1992:2021)

x[x>2000 & !x %in% c(2005,2006,2007)]

```

## Tipos de dato básicos en R

La información puede ser codificada de maneras muy diferentes. Normalmente, asociamos la palabra datos con números, pero esta identificación es falsa por la exclusión de una diversidad de otros formatos y sistemas de codificación empleados en la representación de atributos del mundo empírico en símbolos. Tal enfoque clásico de los tipos de datos tiene una falla importante: no incluye información que no está codificada en texto. Los modelos de IA, por ejemplo, utilizan videos, sonidos o imágenes como fuente para sus análisis. Suelen traducir colores o formas en texto antes de realizar cualquier cálculo. El número 5, una imagen, una música, un poema o un video, todos representan diferentes tipos de datos.

### Tipos de vector en R

En esta subsección, exploramos los tipos de datos más básicos en R. Representan tipos alternativos de vectores (o variables) utilizados para almacenar información y procesarla durante el análisis.

-   **Character -** son vectores que almacenan información de texto. Cualquier tipo de texto, desde una simple palabra hasta libros enteros, puede ser almacenado en vectores de caracteres. Simplemente **escribe 'print(a)'** después de la definición de la variable a a continuación para inspeccionar los resultados:

```{r 01_btypes_chr, exercise=TRUE}

a <- c("Este es una variable de tipo caracter.","Guarda solamente texto.")


```

```{r 01_btypes_chr-solution}

a <- c("Este es una variable de tipo caracter.","Guarda solamente texto.")

print(a)

```

-   **Factor -** es un tipo de variable utilizado para representar datos categóricos y ordinales. La mayoría de las encuestas utilizan códigos numéricos como sustitutos de nombres para evitar errores de escritura y ahorrar espacio en disco. El vector de factor en R permite definir las etiquetas correspondientes para cada valor numérico. Por ejemplo, tenemos un vector *a* con valores repetidos de 1,2,3,4 correspondientes a "Democracia", "Autocracia", "Semi-democracia" y "Totalitarismo". Cuando analizamos los datos, preferimos ver las etiquetas en lugar de números sin sentido. Factor hace precisamente eso en R.

    -   Primero, **presiona el botón "Run code"** para ver los resultados. Probablemente verás un conjunto de números como se declara en el vector *a* a continuación.

    -   Luego, **escribe 'print(b)'** al final del fragmento de código a continuación **y, luego, presiona "run code"**:

```{r 02_btypes_fct, exercise=TRUE, exercise.lines=20}

# Declara una variable a con 1,2,3, y 4 como valores
a <- c(1,1,2,3,4,2,1,4,3,1,4,1,3,3,2,1,4,1)

# Inspecciona los resultados de a
print(a)

# convierte ka variable en un factor, 
# asociando etiquetas a cada valor
b <- factor(x = a, 
            levels = c(1,2,3,4), 
            labels = c("Democracia", 
                       "Autocracia", 
                       "Semidemocracia", 
                       "Totalitarismo"))

# Inspecciona los resultados para b


```

```{r 02_btypes_fct-solution}

# Declara una variable a con 1,2,3, y 4 como valores
a <- c(1,1,2,3,4,2,1,4,3,1,4,1,3,3,2,1,4,1)

# Inspecciona los resultados de a
print(a)

# convierte ka variable en un factor, 
# asociando etiquetas a cada valor
b <- factor(x = a, 
            levels = c(1,2,3,4), 
            labels = c("Democracia", 
                       "Autocracia", 
                       "Semidemocracia", 
                       "Totalitarismo"))

# Inspecciona los resultados para b
print(b)

```

¿Qué ha cambiado? Como puedes ver, ahora, el vector *b* reemplaza los números con sus respectivas etiquetas o tipos de régimen.

Intenta calcular la frecuencia de los regímenes en la variable *b* escribiendo el comando 'table(b)' en el fragmento de código a continuación:

```{r 02_btypes_fct_b, exercise=TRUE, exercise.lines=20}

# Declara una variable a con 1,2,3, y 4 como contenido
a <- c(1,1,2,3,4,2,1,4,3,1,4,1,3,3,2,1,4,1)

# Inspecciona los resultados para a
print(a)

# convierte la variable en un factor, 
# asociando etiquetas a cada valor
b <- factor(x = a, 
            levels = c(1,2,3,4), 
            labels = c("Democracia", 
                       "Autocracia", 
                       "Semi-democracia", 
                       "Totalitarismo"))

# Calcula la frecuencia usando table(b)


```

```{r 02_btypes_fct_b-solution}

# Declara una variable a con 1,2,3, y 4 como contenido
a <- c(1,1,2,3,4,2,1,4,3,1,4,1,3,3,2,1,4,1)

# Inspecciona los resultados para a
print(a)

# convierte la variable en un factor, 
# asociando etiquetas a cada valor
b <- factor(x = a, 
            levels = c(1,2,3,4), 
            labels = c("Democracia", 
                       "Autocracia", 
                       "Semi-democracia", 
                       "Totalitarismo"))

# Calcula la frecuencia usando table(b)
table(b)

```

¿Cuál es el tipo de régimen más común? ¿Y cuál es el menos común?

¡Excelente! Acabas de hacer tu primera tabla de frecuencias.

------------------------------------------------------------------------

**NOTA:** Revisa el código anterior. Puedes ver que hay una secuencia clara en él. En primer lugar, necesitamos decirle a R que el vector *a* contiene esos valores. En segundo lugar, inspeccionamos el contenido de *a*. En tercer lugar, creamos un nuevo vector llamado *b* a través de la conversión de los valores de *a* a un vector con etiquetas categóricas. Finalmente, usamos 'table(b)' para calcular la tabla de frecuencias de todas las categorías en el vector *b*. Si no hubiéramos declarado *a*, en primer lugar, todas las instrucciones siguientes no funcionarían. A partir de ahora, presta atención a la secuencia del código. Será MUY importante en el futuro.

------------------------------------------------------------------------

-   **Numeric -** representa vectores (variables) con datos continuos. También puede almacenar información discreta, pero trata estos datos como si fueran continuos.

Abajo, creamos otro vector con el nombre *a*, pero ahora, tiene algunos números (9.5,19.5,30.5, y 40.5) en él. Luego, inspeccionamos su contenido. Una vez hecho esto, por favor, realiza los siguientes pasos:

-   Primero, **escribe sum(a)** para sumar todos los valores de *a*.

-   Luego, **multiplica los valores de *a* por 10** para refrescar algunos de los ejemplos de la última sesión.

-   Finalmente, **haz clic en 'Run Code'** para ejecutar el código:

```{r 02_btypes_num, exercise=TRUE, exercise.lines=12}

# Declara una variable a con 9.5,19.5,30.5, y 40.5 como contenido
a <- c(9.5,19.5,30.5,40.5)

# Inspecciona los resultados para a
print(a)

# Suma todos los valores empleando la función sum()


# Repaso: multiplica todos los valores de a por 10


```

```{r 02_btypes_num-solution}

# Declara una variable a con 9.5,19.5,30.5, y 40.5 como contenido
a <- c(9.5,19.5,30.5,40.5)

# Inspecciona los resultados para a
print(a)

# Suma todos los valores empleando la función sum()
sum(a)

# Repaso: multiplica todos los valores de a por 10
a * 10

```

-   **Integer -** son vectores utilizados para contener números discretos. Edades, el número de hijos, páginas en un libro, todos estos son ejemplos de cifras discretas. Difieren de *numeric* solo porque son redondos, es decir, no tienen fracciones.

El código a continuación es muy similar al anterior. Solo hay tres diferencias:

1.  el vector *a* ahora contiene solo enteros (números discretos);

2.  en lugar de sum(a) debes usar mean(a) para calcular el valor promedio de *a* y;

3.  en lugar de multiplicar por 10, debes calcular el cuadrado de los valores de *a*.

```{r 02_btypes_int, exercise=TRUE, exercise.lines=12}

# Declara una variable a con 10,20,30, y 40 como contenido
a <- c(10,20,30,40)

# Inspecciona los resultados para a
print(a)

# Encuentra el valor promedio de a usando la función mean()

```

```{r 02_btypes_int-solution}

# Declara una variable a con 10,20,30, y 40 como contenido
a <- c(10,20,30,40)

# Inspecciona los resultados para a
print(a)

# Encuentra el valor promedio de a usando la función mean()
mean(a)

```

------------------------------------------------------------------------

**NOTA:** En todos los fragmentos de código, podemos ver que hay líneas de texto coloreadas en verde. Estas líneas comienzan con el símbolo de almohadilla '\#'. Todas las líneas que comienzan (o continúan) con \# en R se consideran comentarios. Este recurso es valioso para hacer un seguimiento de lo que estamos haciendo y de lo que queremos lograr con nuestro código.

Existen dos tipos de comentarios en R:

1.  Comentarios de línea completa:

    [\# El siguiente comando calcula la media de la variable a.]{style="color:green"}

    mean(a)

2.  Comentarios en línea:

    mean(a) [\# este comando calcula la media de la variable a]{style="color:green"}

Puedes usar ambos para hacer un seguimiento de tus análisis. Depende principalmente de tu estilo y del detalle del comentario que deseas lograr en tu código.

------------------------------------------------------------------------

-   **Date -** los vectores de fecha y hora almacenan fechas y horas. Son particularmente útiles para calcular diferencias de tiempo. El ejemplo a continuación asigna la hora y la fecha actual a dos variables, *a* y *b*, con una diferencia de 3 segundos. Usando la función 'print()', se pueden inspeccionar los resultados. Al final, podemos verificar si el lapso de tiempo entre las dos variables es realmente de tres segundos restando a de b.

```{r 02_btypes_dat, exercise=TRUE, exercise.lines=18}

# Guarda la fecha y hora actuales en la variable a
a <- Sys.time()

# Pone el R "a dormir" (no hacer nada) por 3 segundos
Sys.sleep(3)

# Guarda la fecha y hora actuales en la variable b
b <- Sys.time()

# Inspecciona el valor de a
print(a)

# Inspecciona el valor de b
print(b)

# Repaso: subtrae a de b.


```

```{r 02_btypes_dat-solution}

# Guarda la fecha y hora actuales en la variable a
a <- Sys.time()

# Pone el R "a dormir" (no hacer nada) por 3 segundos
Sys.sleep(3)

# Guarda la fecha y hora actuales en la variable b
b <- Sys.time()

# Inspecciona el valor de a
print(a)

# Inspecciona el valor de b
print(b)

# Repaso: subtrae a de b.
b-a

```

-   **Logical -** son vectores que almacenan valores lógicos. Por ejemplo, si creas una variable de prueba para mayores de 65 años, puedes marcar cada valor de esta variable con FALSE o TRUE.

```{r 02_btypes_log, exercise=TRUE, exercise.lines=22}

# Guarda valores verdaderos o falsos en el
# vector a
a <- c(TRUE, TRUE,FALSE, TRUE, FALSE)

# Inspecciona los valores de a
print(a)

# También puedes convertir valores a 
# verdadero o falso empleando condiciones

# Crea una variable a con edades
a <- c(66,45,33, 67,89,22)

# Averigua cuales valores de a 
# son iguales o superiores a 65 
# y los guarda en el vector b
b <- a>=65

# Inspecciona los resultados de b
print(b)

```

### ¿De qué tipo es mi vector?

Podemos verificar el tipo de un vector utilizando la función iniciada con is. y el tipo. Son los siguientes:

-   is.character()

-   is.factor()

-   is.numeric()

-   is.integer()

-   is.logical()

Otro modo, más general, de averiguar el tipo de dato consisten en emplear la función *class()*. Pero en lugar de dar TRUE o FALSE, la función class() devuelve el tipo de datos.

En el siguiente fragmento de código, verificamos si el vector *a* es numérico y, si no lo es, averiguamos a qué tipo de datos pertenece:

```{r 02_chk, exercise=TRUE, exercise.lines=8}

# Guarda valores en el vector a
a <- c("1","2","3","4","5")

# Averigua si es una variable numérica


# Determina de qué tipo es la variable


```

```{r 02_chk-solution}

# Guarda valores en el vector a
a <- c("1","2","3","4","5")

# Averigua si es una variable numérica
is.numeric(a)

# Determina de qué tipo es la variable
class(a)

```

### Conversión de tipos de datos

En muchas ocasiones, los datos muestran errores e imperfecciones. En algunos casos, los números se codifican como texto. O las variables de texto deben convertirse en categóricas.

Las funciones para convertir vectores entre tipos de datos son:

-   **as.character() -** convierte cualquier formato en un vector de caracteres.

-   **as.numeric() -** convierte en numérico. Esta función es más restrictiva, ya que solo los números representados como texto o factores pueden convertirse en números. Una variable x \<- c("1","2","3","4") devolvería c(1,2,3,4). Un factor x \<- c("Bajo", "Medio", "Alto") devolvería c(1,2,3).

-   **as.integer() -** convierte en entero. Exactamente igual que la función anterior. La única diferencia radica en que esta función solo devuelve números redondos. Una variable x \<- c("1.","2.3","3.4","4.3") devolvería c(1,2,3,4).

-   **as.logical() -** convierte ceros en FALSE y números positivos en TRUE.

-   **as.Date() -** convierte texto formateado como fechas en vectores de fecha que se pueden emplear para comparar fechas y establecer diferencias de tiempo.

-   **as.factor() -** convierte en factor. Tanto los números como el texto pueden servir como factores. Por lo tanto, la conversión es directa.

**Ejercicio 1.** De texto a número. Convierte la variable *a* de carácter a numérico y entero. Tras cada conversión, verifica si la conversión fue exitosa.

```{r 02_conv_txn, exercise=TRUE, exercise.lines=15}

# Guarda números entre comillas en el vector a
a <- c("1","2","3","4","5")

# Convierte a  numérico
a <- as.numeric(a)

# Averigua si a es numérico

# Convierte a a integer (entero)
a <- as.integer(a)

# Averigua si a es integer 


```

```{r 02_conv_txn-solution}

# Guarda números entre comillas en el vector a
a <- c("1","2","3","4","5")

# Convierte a  numérico
a <- as.numeric(a)

# Averigua si a es numérico
is.numeric(a)

# Convierte a a integer (entero)
a <- as.integer(a)

# Averigua si a es integer 
is.integer(a)

```

**Ejercicio 2.** De número a texto. También puedes convertir números en texto fácilmente. Convierte la variable *a* de numérica a carácter. Tras cada conversión, verifica si la conversión fue exitosa.

```{r 02_conv_ntx, exercise=TRUE, exercise.lines=10}

# Crea el vector a con números de 1 a 5
a <- c(1:5)

# Convierte a character
a <- as.character(a)

# Averigua si a es un vector de tipo character


```

```{r 02_conv_ntx-solution}

# Crea el vector a con números de 1 a 5
a <- c(1:5)

# Convierte a character
a <- as.character(a)

# Averigua si a es un vector de tipo character
is.character(a)

```

**Exercise 3.** From text to Date. If a variable only contains dates expressed as text, users will not be able to calculate time differences. This is why it is important to convert calendar information into a proper Date type to get the full advantages of being able to establishing time metrics within R. Convert variable *a* from character to Date. After each conversion, check if the conversion was successful.

```{r 02_conv_txdt, exercise=TRUE, exercise.lines=10}

# Guarda fechas en el vector a como texto
a <- c("2001-01-01","2022-07-15","2013-12-15","2019-07-06","2015-05-05")

# Convierte a Date (fecha)
a <- as.Date(a)

# Puesto que no hay una función 
# is.Date, averigua la clase de a

```

```{r 02_conv_txdt-solution}


# Guarda fechas en el vector a como texto
a <- c("2001-01-01","2022-07-15","2013-12-15","2019-07-06","2015-05-05")

# Convierte a Date (fecha)
a <- as.Date(a)

# Puesto que no hay una función 
# is.Date, averigua la clase de a
class(a)

```

**Ejercicio 4.** De texto a factor. En el caso de que queramos trabajar con categorías, pero la variable original sea un número o un carácter, necesitamos convertirla en un factor. El siguiente código convierte la variable *a* de carácter a factor. Comprueba si la conversión creó un vector de factores.

```{r 02_conv_txfc, exercise=TRUE, exercise.lines=10}

# Guarda valores numéricos en el vector a
a <- c(1,2,1,3,4,1,2,1,1,3,4,2,2)

# Convierte a factor
a <- factor(a, levels=c(1,2,3,4), labels = c("Coffee","Tea","Water","Juice"))

# Averigua si a es un factor


```

```{r 02_conv_txfc-solution}

# Guarda valores numéricos en el vector a
a <- c(1,2,1,3,4,1,2,1,1,3,4,2,2)

# Convierte a factor
a <- factor(a, levels=c(1,2,3,4), labels = c("Coffee","Tea","Water","Juice"))

# Averigua si a es un factor
is.factor(a)

```

**Ejercicio 5.** De factor a texto. El último ejemplo convierte factores en texto. A veces solo queremos conservar el texto de la variable y no considerarla como una variable categórica formal. En esos casos, necesitamos convertir el vector de factor a carácter.

```{r 02_conv_fctx, exercise=TRUE, exercise.lines=14}

# Guarda valores numéricos en el vector a
a <- c(1,2,1,3,4,1,2,1,1,3,4,2,2)

# Convierte a um factor
a <- factor(a, levels=c(1,2,3,4), labels = c("Coffee","Tea","Water","Juice"))

# Ahora convierte a character
a <- as.character(a)

# Averigua si a es un vector de character

```

```{r 02_conv_fctx-solution}

# Guarda valores numéricos en el vector a
a <- c(1,2,1,3,4,1,2,1,1,3,4,2,2)

# Convierte a um factor
a <- factor(a, levels=c(1,2,3,4), labels = c("Coffee","Tea","Water","Juice"))

# Ahora convierte a character
a <- as.character(a)

# Averigua si a es un vector de character
is.character(a)

```

## Tipos de dato avanzados en R

### Matrices

De acuerdo con el diccionario de Oxford, una matriz es:

"un conjunto rectangular de cantidades o expresiones en filas y columnas que se trata como una sola entidad y se manipula de acuerdo con reglas particulares."

Analicemos esta definición en partes:

1.  Conjunto rectangular de cantidades o expresiones en filas y columnas

2.  Tratado como una sola entidad

3.  Manipulado de acuerdo con reglas particulares

En R, las matrices solo usan un tipo de datos: números, textos, fechas, etc. En su mayoría, las matrices son numéricas y son muy útiles para acelerar el cálculo de grandes conjuntos de datos. En ciencias sociales, generalmente empleamos Data Frames (la próxima subsección). Aunque son más lentos, permiten que se presente información de diferentes tipos (textos, números, fechas, etc.) en la misma tabla.

```{r 03_mat, exercise=TRUE, exercise.lines=6}

# Crea una matriz de 3 líneas x 2 columnas
matrix(data = c(2, 3, 4, 5, 6, 7), nrow = 3, ncol = 2)

# Crea una matriz de 2 líneas x 3 columnas
matrix(data = c(2, 3, 4, 5, 6, 7), nrow = 2, ncol = 3)

```

### Data Frames (tablas con N líneas x N columnas)

Este es el tipo de dato más familiar en estudios académicos. Cualquier hoja de cálculo de Excel o archivo de datos SPSS se organiza en una tabla caracterizada por un número múltiple de filas y columnas. Por lo general:

-   **Líneas** representan observaciones o unidades de observación. Pueden ser países, entrevistas, partidos, etc.

-   **Columnas** están compuestas por atributos que pertenecen a estas unidades de observación. El PIB de un país, la edad de una persona en una entrevista de encuesta, el porcentaje de votos en un partido dado, etc.

En R, un objeto *data.frame* es una colección de vectores (o variables). Por lo tanto, podemos tener un data.frame con las columnas nombre, edad, sexo, etc.

El siguiente código crea un data.frame con algunas variables:

```{r 03_df, exercise=TRUE, exercise.lines=16}

# Crea vectores para nombres, edades, sexo, y fechas de nacimiento. 
nm <- c("Cristina", "Rodrigo", "John", "Álvaro", "Castelar","Sofia")
ag <- c(32, 45, 39, 25, 24, 26)
sx <- c("Femenino","Masculino","Masculino","Masculino","Femenino","Femenino")
bt <- as.Date(c("1990-12-12","1977-11-22","1983-09-15","1997-09-08","1999-02-28","1998-05-27"))

# Crea un data.frame con dichas variables
df <- data.frame(
                  Name=nm, 
                  Age=ag, 
                  Sex=sx, 
                  Birth=bt)

#Inspecciona las seis primeras líneas del data.frame
head(df)

```

No es común crear data.frames usando variables. Este ejemplo solo ilustra la estructura de este tipo de objeto. Más adelante en el curso, aprenderemos a abrir archivos de datos (Excel, SPSS, CSV, etc.) en R como data.frames. Por ahora, solo necesitamos entender cómo funciona y su estructura básica. Cada columna funciona como una variable o vector. Por lo tanto, podemos hacer cálculos usando estas variables. Verifiquemos si la variable edades es correcta usando la fecha de nacimiento y la función 'Sys.Date()' que devuelve la fecha de hoy para compararla con las variables en el data.frame df:

```{r 03_dfb, exercise=TRUE, exercise.lines=29}

# Crea vectores para nombres, edades, sexo, y fechas de nacimiento. 
nm <- c("Cristina", "Rodrigo", "John", "Álvaro", "Castelar","Sofia")
ag <- c(32, 45, 39, 25, 24, 26)
sx <- c("Female","Male","Male","Male","Female","Female")
bt <- as.Date(c("1990-12-12","1977-11-22","1983-09-15","1997-09-08","1999-02-28","1998-05-27"))

# Crea un data.frame utilizando dichas variables
df <- data.frame(
                  Name=nm, 
                  Age=ag, 
                  Sex=sx, 
                  Birth=bt)

# Calcula las edades usando la variable Birth en el data.frame df

# Primero, calculamos la edad en años de cada persona en el data.frame df.
# Para hacerlo, necesitamos restar la fecha de nacimiento de la fecha de hoy (Sys.Date())
# y dividir por 365 días. Finalmente, redondeamos el número a años completos con round().
ageb <- (Sys.Date()-df$Birth)/365 # Calcula la edad en años
ageb <- round(ageb) # Redondea los valores a años completos

# Muestra los resultados
print(ageb)

# Ahora, comparamos la columna Age del data.frame df con el 
# vector ageb para verificar si todas las edades son correctas
df$Age==ageb

```

Podemos ver que la edad de Sofia es incorrecta. De acuerdo con la fecha de nacimiento, debería tener 25 años, pero en el data.frame, tiene 26. Por lo tanto, necesitamos corregir esta variable. Para hacerlo, podemos reemplazar la columna Age en el data.frame df con el vector ageb.

**Hazlo tú mismo (DIY)**

Ahora es tu turno. Por favor, crea un data.frame llamado "capitales" con las 8 capitales de provincia de Andalucía que contenga las siguientes variables: Ciudad, Población y Área_Km2. Luego, visualiza las primeras seis filas usando head().

PLUS ULTRA:

1.  ¿Podrías calcular la densidad demográfica de cada capital y crear un nuevo vector llamado dens con ella?

2.  ¿Qué tal asignar esta nueva variable (densidad demográfica) a una nueva columna llamada Densidad en el data.frame capitales?

¡Inténtalo!

AYUDA:

Puedes encontrar la información en Wikipedia.

```{r 03_dfc, exercise=TRUE, exercise.lines=25}


```

```{r 03_dfc-solution}

# Crea vectores para ciudad, poblacion y area

# vector city con las capitales de provincia de Andalucía
city <- c("Almería","Cádiz","Córdoba","Granada", "Huelva", "Jaén", "Málaga", "Sevilla")
pop <- c(200578, 111811, 323768, 230595, 142532, 111888, 586384, 684025)
area <- c(295.51, 12.3, 1254.91, 88.02, 151.33, 424.3, 394.98, 141.42)

# Crea un data.frame con dichas variables
capitals <- data.frame(
                  City=city, 
                  Population=pop, 
                  Area_Km2=area)

# Densidad demográfica
dens <- capitals$Population/capitals$Area_Km2

# Visualiza los resultados
print(dens)

# Añade la densidad demográfica al data.frame
capitals$Density <- dens

# Visualiza los resultados usando head
head(capitals)

```

### Listas

Una lista es un tipo de objeto en R que puede contener cualquier tipo de objeto. Es más que un tipo de dato, es un sistema de almacenamiento para múltiples objetos o información.

Imaginemos que tenemos una lista llamada *Libros* para describir diferentes aspectos de los libros: título (vector de caracteres), subtítulo (caracter), autor (caracter), ISBN (entero), número de páginas (entero), precio pagado (número), fecha de publicación (fecha). En la lista *Libros*, también almacenamos la tabla de contenidos y sus respectivas páginas como un data.frame. Imagina que trabajas en una biblioteca. Por lo tanto, la lista *Libros* también almacena el registro actualizado de retiros y devoluciones (data.frame). También puedes almacenar la portada del libro (raw o un objeto de imagen) y una tabla con el número de veces que cada libro fue prestado (un objeto de tabla).

Las listas son muy fáciles de crear. Es literalmente como una bolso en el que simplemente dejas caer cosas. También tiene los mismos problemas que puede tener un bolso o mochila llena: se vuelve difícil recuperar información si el bolso no está organizado.

Podemos dar nombres a cada objeto en la lista para facilitar su búsqueda más adelante.

```{r 03_ls, exercise=TRUE, exercise.lines=35}

# Crea un data.frame con todos los movimientos (préstamos y devoluciones)
# de un libro en nuestra biblioteca.
prestamo <- data.frame(
                      libro=c(1,
                              1),
                      usuario = c("Álvaro",
                                "John"),
                      fecha_prestamo=as.Date(
                                      c("2022-07-01",
                                        "2022-07-08")
                                      ),
                      fecha_devolucion=as.Date(
                                      c("2022-07-07", 
                                        NA)
                                      ),
                      dev_esperada=as.Date(
                                      c("2022-07-07",
                                        "2022-07-14")
                                      )
                      )

# Crea una lista con los datos sobre el libro y los movimientos
libros <- list(
              cod_libro=c(1),
              Titulo="Por qué YO soy tan especial",
              Autor="Yo mismito",
              Editorial="Ediciones E(R)go",
              ISBN="8598-5682323",
              Paginas=345,
              Precio=25.42,
              catalogo="C.182.765",
              movimientos=prestamo
              )

# Inspecciona el número de veces que el
# libro ha sido prestado
libros$movimientos

```
