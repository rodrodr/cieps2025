[
  {
    "objectID": "basico.html",
    "href": "basico.html",
    "title": "Fundamentosde visualización de datos",
    "section": "",
    "text": "El documental de PBS “El arte de la visualización de datos” resulta muy informativo sobre la importancia de la visualización de datos:\n\n\nTodos los días vemos cómo se manipula la información para intentar convencer a la gente. Los gráficos no se quedan fuera de esa tendencia. El corto video abajo nos muestra algunas de las estrategias más comunes para descubrir intentos de mentir con gráficos:"
  },
  {
    "objectID": "basico.html#por-qué-visualizar-datos",
    "href": "basico.html#por-qué-visualizar-datos",
    "title": "Fundamentosde visualización de datos",
    "section": "",
    "text": "El documental de PBS “El arte de la visualización de datos” resulta muy informativo sobre la importancia de la visualización de datos:\n\n\nTodos los días vemos cómo se manipula la información para intentar convencer a la gente. Los gráficos no se quedan fuera de esa tendencia. El corto video abajo nos muestra algunas de las estrategias más comunes para descubrir intentos de mentir con gráficos:"
  },
  {
    "objectID": "basico.html#qué-es-la-visualización-de-datos",
    "href": "basico.html#qué-es-la-visualización-de-datos",
    "title": "Fundamentosde visualización de datos",
    "section": "¿Qué es la visualización de datos?",
    "text": "¿Qué es la visualización de datos?\nLa visualización de datos es una forma de comunicar información de manera efectiva utilizando elementos visuales como gráficos, mapas y tablas. Se trata de una parte esencial del trabajo científico, puesto que representa tanto una herramienta de análisis como un instrumento de comunicación de los resultados.\nDentro de los ámbitos científicos, los gráficos se consideran como parte del proceso de exploración de datos. Resultan muy útiles para descubrir patrones, validar la calidad de los datos y entender procesos que serían más difíciles de entender si se presentaran en forma de tablas o texto.\nMás recientemente, su uso se ha extendido a la comunicación de resultados y a la divulgación científica, ya que permiten presentar de manera clara y efectiva los hallazgos de un análisis de datos tanto a expertos como a un público no especializado."
  },
  {
    "objectID": "basico.html#por-qué-es-importante-la-visualización-de-datos",
    "href": "basico.html#por-qué-es-importante-la-visualización-de-datos",
    "title": "Fundamentosde visualización de datos",
    "section": "¿Por qué es importante la visualización de datos?",
    "text": "¿Por qué es importante la visualización de datos?\nTomemos como ejemplo, el gráfico “Warming Stripes”, creado por Edward Hakwings en 2018 para representar los cambios en las temperaturas medias anuales entre 1850 y 2017.\n \nEste gráfico se ha convertido en un símbolo de la lucha contra el cambio climático y ha sido utilizado por organizaciones como la ONU y la NASA para concienciar sobre el problema. ¿Por qué? Examinemos algunos elementos que hacen este gráfico tan efectivo:\n\nSimplicidad: El gráfico es simple y fácil de entender. No hay elementos de distracción, comentarios o decoraciones indeseadas, ni siquiera hace falta una escala informando qué se mide. Por solo mirarlo, ya nos damos cuenta de que se trata de una secuencia lineal de temperatura. Aquí, la regla de “menos es más” se afirma con mucha potencia.\nEl uso del color: El uso del color es muy efectivo. El color azul representa temperaturas más bajas, mientras que el rojo representa temperaturas más altas. La elección de estos colores es muy acertada, ya que el azul y el rojo son colores que se asocian comúnmente con el frío y el calor. Por lo tanto, no hace falta una leyenda para explicar qué representa cada barra.\nEl uso de la escala: Por tratarse de cambios (y no de valores absolutos), la variación entre las observaciones aumenta, lo que facilita la visualización de un patrón claro e inequívoco de calentamiento global.\n\nEn resumen, aunque siempre haya habido grupos contrarios a la tesis del calentamiento global, a partir de la creación de esta visualización, cualquiera que quiera argumentar en contra tendrá mucha mayor dificultad en hacerlo y necesitará argumentos muy convincentes para disuadir a la gente.\nTeniendo en mente el ejemplo anterior, podemos decir que la visualización de datos es importante por varias razones:\n\nFacilita la comprensión de los datos: Los gráficos y las visualizaciones permiten comprender mejor los datos y descubrir patrones y relaciones que serían difíciles de detectar de otra manera. Es cada vez más común trabajar con una cantidad enorme de datos que serían inabarcables sin estrategias heurísticas que posibilitaran su síntesis de manera efectiva. Los gráficos son una de las formas de abstracción más poderosas. Vemos que se trata de un gráfico muy fácil de leer.\nFacilita la comunicación de resultados: Los gráficos y las visualizaciones permiten comunicar de manera clara los resultados de un análisis de datos a expertos y a un público no especializado. No hace falta ser un experto en climatología para entender que las barras rojas son cada vez más largas y que eso significa que las temperaturas están aumentando. Personas con muy distintos niveles educativos pueden entender el mensaje.\nFacilita la toma de decisiones: Los gráficos y las visualizaciones permiten tomar decisiones informadas basadas en datos y evidencia. El gráfico de las barras de temperatura deja claro que tenemos un problema y que hace falta tomar cartas en el asunto, pues el crecimiento parece ser exponencial.\nFacilita la identificación de problemas: Los gráficos y las visualizaciones permiten identificar problemas y errores en los datos, como valores atípicos y datos faltantes.\nFacilita la identificación de oportunidades: Los gráficos y las visualizaciones permiten identificar oportunidades y tendencias que pueden ser aprovechadas para mejorar los procesos y los resultados.\n\n\nPor lo tanto, no hace falta tener un super gráfico lleno de parafernalia y “cachibaches” para comunicar efectivamente un mensaje. La simplicidad y la claridad son las claves para una visualización efectiva."
  },
  {
    "objectID": "basico.html#reglas-básicas",
    "href": "basico.html#reglas-básicas",
    "title": "Fundamentosde visualización de datos",
    "section": "Reglas básicas",
    "text": "Reglas básicas\nExiste un conjunto de reglas básicas que nos ayudan a la hora de crear visualizaciones de alta calidad. Si uno se adhiere a estos principios básicos, es mucho más probable que sea capaz de comunicar de manera efectiva la información que se desea transmitir.\n\nTenga una historia que contar o buscar\nYa sé que parece discurso de vendedor de autos usados o de conferenciante de las charlas TED, pero es cierto. ¿Por qué el gráfico es importante? ¿Qué pretende descubrir o revelar? No es necesario que sea una historia compleja o sumamente elaborada, sino que sea clara, fácil de entender y, sobre todo, que importe a la gente. Y para que importe a la gente, debes saber a qué gente te diriges, aunque, a veces, uno termina sorprendiéndose de la diversidad de personas que se interesan por un tema.\nEn 2018, terminadas las elecciones presidenciales de Brasil en las que ganó Jair Bolsonaro, empezó una discusión en los medios y las redes sociales sobre cuál habría sido el apoyo efectivo del tercer candidato en la disputa, Ciro Gomes, al candidato del Partido de los Trabajadores (PT), Fernando Haddad, en la segunda vuelta de los comicios. Muchos apoyadores del PT decían que Ciro Gomes había sido el responsable de la derrota de Haddad, mientras que otros decían que no había sido así. Entonces, he decidido aplicar una técnica de inferencia ecológica, que intenta descubrir patrones a partir de datos agregados, para ver si podía descubrir algo.\nPara casa mesa, he calculado la cantidad de votos que se habrían transferidos de unos a otros. Con esas informaciones, podía estimar cuál proporción de votos de cada candidato se transfería a otros, los blancos y nulos y las abstenciones. Con esos datos, he creado el siguiente gráfico cordas que revela la transferencia estimada de votos entre candidatos:\n\nEn la izquierda del gráfico vemos la red completa de transferencias, con los candidatos derrotados en la primera vuelta en la izquierda y las opciones de voto en la segunda vuelta a la derecha. En la derecha de la imagen, vemos la transferencia de cada candidato por separado. He decidido separar cada uno de ellos para facilitar la visualización de los patrones.\nVemos que las secciones electorales que votaron en mayor medida a Ciro Gomes han sido las únicas que inequívocamente han transferido votos a Fernando Haddad. Los patrones de los demás candidatos favorecen a Bolsonaro o son más complejos, sin una preferencia clara.\nAunque se tratara de una publicación privada en facebook, destinada solamente a mis amigos politólogos, en poco tiempo el gráfico se ha vuelto viral (infelizmente, sin la explicación metodológica que lo acompañaba). Muchos de los apoyadores de Ciro lo compartían y comentaban para contrarrestar las acusaciones de los del PT de que los “ciristas” habían votado nulo o apoyado a Bolsonaro. Este impacto inesperado solo fue posible porque el gráfico tenía una historia que contar y que importaba a la gente.\n\n\nQue tus datos sean de calidad\nEn la comunidad de análisis de datos en inglés, se suele emplear una expresión que me parece excelente para entender los problemas y virtudes de cualquier investigación o gráfico: “garbage in, garbage out” (algo en español como “aunque la mona se vista de seda, mona se queda” o quod natura non dat, Salmantica non praestat). Es decir, si no eres Moisés, no puedes sacar agua de piedra. Creo que las referencias populares nos quieren decir es: un análisis basado en datos de mala calidad no puede aportar nada de interesante. No resulta casual que la mayor parte del trabajo de investigación se dedique a la recolección y limpieza de datos y en las revisiones por pares se hace hincapié en la consistencia de los aspectos metodológicos. Tienen que ser interesantes y confiables para ser válidos.\n\n\n¡Esto son gráficos, no pinturas Rococó, señores!\nA mí, personalmente, me gusta el Rococó. Esos palacios decorados, esas pinturas de Fragonard o Watteau, todo muy bonito, un lujazo manifiesto en colores y formas. No obstante, un gráfico (al menos en un principio) no debería ser algo que recargue los sentidos. Obviamente, hay controversias y algunos diseñadores defienden la idea de que un gráfico es una forma de expresión visual más y, por lo tanto, puede asumir cualquier estilo estético que se desee.\nNo obstante, si queremos comunicar de forma rápida y efectiva a un público que no tiene tiempo ni busca una contemplación estética en nuestros gráficos, lo mejor es mantenerlos simples y claros. No es necesario que sean aburridos, pero sí que sean efectivos.\n¿Qué quiero decir simples y claros? Primero, que no se debe abusar de los colores, las formas y los elementos decorativos. Un gráfico debe ser fácil de leer y de entender. Si el lector tiene que esforzarse para entender lo que se quiere comunicar, es probable que no lo haga. Llenar los gráficos de elementos visuales vacíos de significado (para evitar el horror vacui) resultaría contraproducente. Eso no quiere decir que no se puedan emplear elementos estéticos para facilitar el entendimiento y causar una impresión placentera en los lectores. Como dijo Edward Tufte en el documental de la PBS, “el contenido siempre viene primero, la belleza naturalmente le seguirá”.\n\n\nHuye de las plantillas de Excel, SPSS, Stata o R\n¡Pero, tampoco nos pasemos de dejados! Si examinamos una muestra de publicaciones científicas en las ciencias sociales resulta impresionante ver el poco cuidado estético que se tiene con los gráficos. Aunque no es necesario que sean obras de arte, sí es importante que sean fáciles de leer y que aprovechen para informar lo mejor posible. No es necesario que sean muy elaborados, pero sí que sean claros, efectivos y atractivos.\nEn la mayoría de los casos, los autores simplemente copian y pegan los resultados de Excel, SPSS o Stata (incluso R) en sus documentos sin preocuparse por cómo el perfeccionamento de elementos visuales como el color, el tipo de fuente o la disposición de los símbolos puede mejorar la comprensión de los datos. Un gráfico atractivo, además de limpio y efectivo, resulta agradable y llama la atención por el placer estético que produce en el observador. También es una forma de demostrar cierto estilo o sofisticación en el trabajo de un autor. Es como su “marca” personal. Es la impresión que suelo tener cuando veo un gráfico de diseñadoras como Federica Fragapane, Giorgia Lupi o Nadieh Bremer.\nAtraer la atención del lector no es cosa menor. Tenemos a nuestra disposición miles de artículos y libros para leer, y si no logramos captar la atención del lector, es probable que nuestro trabajo no sea leído. Gráficos bien acabados revelan atención al detalle y preocupación por la calidad del trabajo que se lleva a cabo. Utilizando una analogía con la moda, sería como hacer una “operación bikini” y luego ir a la playa en chándal de andar por casa.\nNo digo que te conviertas en un diseñador para hacer un gráfico atractivo, pero sí es necesario tener en cuenta algunos principios básicos de diseño y visualización de datos. Existe una infinitud de manuales de visualización de datos con capítulos específicos sobre la elección de colores, fuentes, tamaños, formas, etc. Mi sugerencia es que consultéis algunas de esas obras para aprender los principios básicos, valerá mucho la pena (Brewer 2005; Healy 2019; Brewer, Hatchard, and Harrower 2003; Yau 2011, 2013; Tufte 2001; Cleveland 1993; Munzner 2014; Few 2004). Veréis que a partir de cierto momento se empiezan a repetir los mismos consejos y recomendaciones. En ese instante, ya tendrás lo suficiente para aplicar en tus propios gráficos.\n\n\n\n\n\n\n\n\n\nEn el gráfico anterior, he comparado tres gráficos realizados con plantillas de Excel, Stata y ggplot2 con uno hecho por mí. Aunque los tres primeros gráficos son correctos y cumplen con su función, pueden mejorar mucho.\nAñadimos dos variables más: urbanización para el tamaño y si se trata de un país de mayoría musulmana. Además, incorporamos un título en negrita, un subtítulo y una fuente. También hemos cambiado los colores y la posición de la leyenda y lo hemos convertido en una versión interactiva con un “tooltip” con los datos representados de forma detallada."
  },
  {
    "objectID": "gramatica.html#gráficos-por-capas",
    "href": "gramatica.html#gráficos-por-capas",
    "title": "Gramáticade los gráficos",
    "section": "Gráficos por capas",
    "text": "Gráficos por capas\nComo se puede ver en el vídeo, la mejor manera de pensar en la gramática de los gráficos es a partir de una estructura de capas superpuestas. La idea es muy sencilla: cada gráfico se construye a partir de una serie de capas que se van sumando una a una, de modo que uno puede ir añadiendo mayor sofisticación y complejidad en la medida que ya tiene resueltos los temas anteriores.\nCada capa de un gráfico es un componente independiente que se puede modificar y combinar con otras capas para crear un gráfico más complejo. La figura abajo nos brinda una representación visual de la gramática de los gráficos:\n\nEn la base se encuentra la capa de datos. Cualquier visualización depende fundamentalmente de la información que se desea comunicar. Esta capa condiciona todo lo que viene después: las geometrías que podemos emplear, las estadísticas, la capacidad de dividir en diferentes grupos, etc.\nImaginemos nuestra base de datos w con los datos de los países. Queremos crear un diagrama de dispersión para analizar la relación entre la esperanza de vida (lifeex_total) y el nivel de democracia (dem_score14). imaginemos que queremos contrastar esas dos variables con el IDH (hdi) y el nivel del PIB per cápita (gdpcap3_08). Nuestro gráfico solo se importará con esas variables y ninguna más, pues no las emplearemos.\n\n\nCode\n# Carga los datos\nlibrary(poliscidata)\n\n# Crea una base w a partir\n# de la original world\nw &lt;- world\n\n# Visualiza el nombre del país,\n# la esperanza de vida y el nivel\n# de democracia\nreactable(w[, c(\"country\", \"lifeex_total\", \"dem_score14\",\"hdi\",\"gdpcap3_08\")])\n\n\n\n\n\n\n\nEsta sería nuestra capa de datos. Tenemos cinco variables, dos en formato texto (factor) y dos numéricas: el nombre del país, la esperanza de vida, el nivel de democracia, el IDH y la desigualdad de género. Para crearla formalmente en R, debemos decir que la base de datos que vamos a emplear es la que se llama w en la función ggplot del paquete ggplot2.\n\n\nCode\n# Carga el paquete\nlibrary(ggplot2)\n\n# Crea la capa de datos \ng &lt;- ggplot(w)\n\n\nEste procedimiento crea un nuevo objeto llamado g (g de gráfico, pero podría ser cualquier otro nombre) que contiene solamente la indicación de que w es la capa de datos.\nLa siguiente capa es la de estética. En esta capa se definen las variables que se van a visualizar y cómo. También se refieren a ese nivel como el “mapeo” de las variables. En nuestro caso, queremos visualizar la esperanza de vida en el eje x y el nivel de democracia en el eje y. Ya tenemos para un gráfico de dispersión (scatterplot).\nNo obstante, también queremos que el tamaño de cada punto sea proporcional al IDH, siendo que los países con mayor desarrollo humano tendrán puntos más grandes y los de menos, más pequeños. Aprovechamos para definir que el color de los puntos corresponda al valor del nivel del PIB per cápita (Bajo, Mediano, Alto).\nPara crear la capa de estética en R, sería tan sencillo como “sumar” la definición de la estética a la capa de datos:\n\n\nCode\n# Añade una capa de estética\n# para la relación entre la esperanza\n# de vida y el nivel de democracia\n# con el IDH establecido como tamaño \n# y el PIB per cápita como color\ng &lt;- g + \n     aes(x=lifeex_total,\n         y=dem_score14,\n         size=hdi,\n         color=gdpcap3_08)\n\n# visualiza el gráfico\ng\n\n\n\n\n\n“¡Pero no veo nada más que el fondo y los ejes!” Claro que no. Estás en el backstage todavía. Solo dijiste al R que querías visualizar la esperanza de vida en el eje x, el nivel de democracia en el eje y, el tamaño de los puntos proporcional al IDH y el color de los puntos proporcional a la desigualdad de género. Pero no le dijiste cómo querías visualizarlo. Para ello necesitas definir que tipo de representación visual quieres: pueden ser puntos, líneas, barras, florecitas, avioncitos… ¿Cómo el R va a adivinar lo que Ud.? Eso es lo que viene a continuación.\nAñadiremos una capa de geometría, representada por la función geom_ seguida del tipo de geometría que queremos. En nuestro caso, queremos puntos, por lo que usaremos la función geom_point.\n\n\nCode\n# Añade la capa de geometría\n# que serán los puntos\ng &lt;- g + geom_point()\n\n# Visualiza el gráfico\ng\n\n\n\n\n\n\nAhora sí, ¡habemus gráfico! Hemos sumado a geometría de puntos a las capas anteriores de datos y estética. Pero, nos resultó un gráfico que da miedo (ya lidiaremos con eso más tarde).\nMuchos pararían aquí, pero desperdiciaríamos la oportunidad de hacer un gráfico más informativo. Todavía podemos añadir más capas y cambios a nuestra visualización para que sea más bonita e eficaz.\nImaginemos que nos gustaría separar los países según regiones. Para ello, necesitamos una nueva capa: la capa de facetas. En esta capa, se definen las variables que se van a utilizar para separar los datos en diferentes paneles. En nuestro caso, queremos separar los países por regiones.\nPara ello, empleamos la función facet_wrap y le decimos que queremos dividir los países por la variable regionun. La capa de facetas se vería así:\n\n\nCode\n# Añade la capa de facetas para\n# dividir el gráfico por regiones\ng &lt;- g + facet_wrap(~regionun)\n\n# Visualiza el gráfico\ng\n\n\n\n\n\nComo habéis visto, he ido añadiendo capas al gráfico y él estaba de lo más contento. Ahora quiero añadir alguna estadística chula que me permita visualizar mejor los resultados, como una elipse que circule los puntos de cada grupo de PIB per cápita. Lo hago por medio de una capa de estadística:\n\n\nCode\n# Añado la capa de estadística\ng &lt;- g + stat_ellipse()\n\n# visualizo el gráfico\ng\n\n\n\n\n\nYa tengo muchos decorados. Ahora toca cambiar un poco la representación jugando con la capa de coordenadas.\n\n\nCode\n# Cambia las coordenadas\n# a polares\ng &lt;- g + coord_polar()\n\n# Visualiza el gráfico\ng\n\n\n\n\n\n¿Demasiado liado para ti? Para mi también. Mi experimento no ha sido muy exitoso. No hay problema, volvemos al tipo de coordenadas anterior:\n\n\nCode\n# Superpone las coordenadas \n# cartesianas a las anteriores\ng &lt;- g + coord_cartesian()\n\n# Visualiza el gráfico\ng\n\n\n\n\n\nEsto nos advierte también que la estructura de capas no resulta obligatoria. Las únicas capas que son estrictamente necesarias son la de datos, estética y geometría. Las demás son opcionales y pueden ser añadidas o quitadas según la necesidad.\nAhora nos toca mejorar la apariencia del gráfico. Para ello, añadiemos una capa de tema. En esta capa, se definen los elementos que se van a utilizar para mejorar la apariencia del gráfico. Necesitamos quitar ese fondo feo, cambiar los colores, añadir un título, cambiar el nombre de los ejes, etc. Hagamoslo:\n\n\nCode\n# Añadimos un tema pre programado\n# para quitar elementos indesejables\ng &lt;- g + theme_classic()\n\n# Cambiamos el color\ng &lt;- g + scale_color_manual(\n                values=c(\"red3\",\n                         \"orange\",\n                         \"blue\"))\n\n# Añadimos un título y cambiamos\n# los nombres de los ejes\ng &lt;- g + labs(title=\"Relación entre esperanza de vida y nivel de democracia\",\n              x=\"Esperanza de vida\",\n              y=\"Nivel de democracia\")\n\n# Cambiamos el título de las\n# leyendas\ng &lt;- g + guides(\n            color = guide_legend(title=\"PIB per cápita\"),\n            size = guide_legend(title=\"IDH\")\n            )\n\n# Aumentamos el tamaño del título\ng &lt;- g + theme(plot.title = \n                 element_text(size=16, \n                              face=\"bold\")) \n\n# Visualizamos el gráfico\ng"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ciencia de datos políticos en R",
    "section": "",
    "text": "Esta página web forma parte del curso “Ciencia de datos políticos con R”. En ella, se recogen los materiales y ejemplos que se desarrollarán durante las sesiones."
  },
  {
    "objectID": "index.html#el-curso",
    "href": "index.html#el-curso",
    "title": "Ciencia de datos políticos en R",
    "section": "",
    "text": "Esta página web forma parte del curso “Ciencia de datos políticos con R”. En ella, se recogen los materiales y ejemplos que se desarrollarán durante las sesiones."
  },
  {
    "objectID": "index.html#el-profesor",
    "href": "index.html#el-profesor",
    "title": "Ciencia de datos políticos en R",
    "section": "El profesor",
    "text": "El profesor\nRodrigo Rodrigues-Silveira \nrodrodr@usal.es\nProfesor de ciencia política de la USAL. Director del proyecto “Comportamiento legislativo y erosión democrática en América Latina” (PELA Comportamiento)."
  },
  {
    "objectID": "index.html#el-contenido",
    "href": "index.html#el-contenido",
    "title": "Ciencia de datos políticos en R",
    "section": "El contenido",
    "text": "El contenido\nDurante el curso se abordarán los siguientes temas:\n\nIntroducción a la la ciencia de datos en R\nManipulación y análisis de datos sociales\nCreación de gráficos y narrativas visuales\nAnálisis de textos y modelos de IA generativa"
  },
  {
    "objectID": "index.html#sesiones",
    "href": "index.html#sesiones",
    "title": "Ciencia de datos políticos en R",
    "section": "Sesiones",
    "text": "Sesiones\nLas sesiones tendrán una duración de 5 horas y se llevarán a cabo en el CIEPS.\nDÍA 1 - 20/01/2025 de 8 a 13h\nDÍA 2 - 21/01/2025 de 8 a 13h\nDÍA 3 - 22/01/2025 de 8 a 13h\nDÍA 4 - 23/01/2025 de 8 a 13h"
  },
  {
    "objectID": "index.html#servicio-técnico",
    "href": "index.html#servicio-técnico",
    "title": "Ciencia de datos políticos en R",
    "section": "🤖 Servicio técnico 🤖",
    "text": "🤖 Servicio técnico 🤖\nPara que podáis reproducir los ejemplos de análisis presentados durante el curso debéis instalar en vuestros ordenadores el R y el RStudio Desktop.\nTambién debéis ejecutar el siguiente código en R que instala los paquetes necesarios:\n\n\nCode\n# Crea un vector con los paquetes a instalar\npc &lt;- c(\"ggplot2\",\"ggrepel\",\"ggdist\",\n        \"ggiraph\",\"giraphExtra\",\"ggridges\",\"dplyr\",\n        \"vdemdata\",\"sf\",\"cowplot\",\"poliscidata\",\n        \"treemap\",\"treemapify\",\"plotly\",\"networkD3\",\n        \"gapminder\",\"patchwork\",\"ggcorrplot\", \n        \"ggnetwork\",\"ggridges\",\"ggbeeswarm\",\"ggtext\",\n        \"netrankr\",\"igraph\",\"reactable\",\"RColorBrewer\",\n        \"hrbrthemes\",\"ggthemes\",\"tvthemes\")\n\n## ACTUALIZACIÓN DE PAQUETES (PARA EL DÍA 6 DE JUNIO)\n\npc &lt;- c(\"plotly\",\"networkD3\",\n        \"gapminder\",\"patchwork\",\"ggcorrplot\", \n        \"ggnetwork\",\"ggridges\",\"ggbeeswarm\",\"ggtext\",\n        \"netrankr\",\"igraph\",\"reactable\",\"RColorBrewer\",\n        \"hrbrthemes\",\"ggthemes\",\"tvthemes\")\n\n# Instala los paquetes\ninstall.packages(pc)\n\n# Instala el paquete tenet que no está en CRAN\n# (si ya no lo habéis instalado en el curso \n# anterior de introducción al R)\ndevtools::install_github(\"rodrodr/tenet\", force=T)"
  },
  {
    "objectID": "interactivo.html",
    "href": "interactivo.html",
    "title": "Interactividaden los gráficos",
    "section": "",
    "text": "Una de las grandes ventajas de la visualización de datos viene de la posibilidad de interactuar con los gráficos. En este sentido, la interactividad permite a los usuarios explorar los datos de manera más profunda, y a menudo, de una manera más intuitiva. En este capítulo veremos cómo crear gráficos interactivos en R a partir de un conjunto de paquetes especializados."
  },
  {
    "objectID": "interactivo.html#introducción",
    "href": "interactivo.html#introducción",
    "title": "Interactividaden los gráficos",
    "section": "",
    "text": "Una de las grandes ventajas de la visualización de datos viene de la posibilidad de interactuar con los gráficos. En este sentido, la interactividad permite a los usuarios explorar los datos de manera más profunda, y a menudo, de una manera más intuitiva. En este capítulo veremos cómo crear gráficos interactivos en R a partir de un conjunto de paquetes especializados."
  },
  {
    "objectID": "interactivo.html#tipos-de-interacción",
    "href": "interactivo.html#tipos-de-interacción",
    "title": "Interactividaden los gráficos",
    "section": "Tipos de interacción",
    "text": "Tipos de interacción\nExisten diferentes formas de interacción en los gráficos interactivos. En este curso exploraremos las siguientes: tooltips, cliques, hover (pasar el cursor sobre un elemento) y zoom. A continuación, describiremos cada una de ellas.\n\nTooltips\nLos tooltips son pequeñas ventanas emergentes que aparecen cuando el usuario pasa el ratón sobre un elemento interactivo. En estos tooltips se pueden mostrar datos adicionales que complementan la información que se muestra en el gráfico. En R, podemos crear tooltips con solamente definir una variable como contenido o crear versiones más complejas a partir de pocas líneas de código html.\nEl código abajo muestra cómo crear dos gráficos de dispersión con tooltips en R. El primero con un tooltip simple y el segundo con uno más complejo. Para hacerlo emplearemos el paquete ggiraph y la geometría geom_point_interactive, que permite crear gráficos de dispersión interactivos.\nPrimer gráfico: tooltip solo con el nombre del país.\n\n\nCode\nlibrary(poliscidata)\nlibrary(ggplot2)\nlibrary(ggiraph)\n\n# Carga los datos\nw &lt;- world\n\n# Genera el gráfico\np &lt;- ggplot(w, \n            aes(x=lifeex_total, \n                y=dem_score14))+\n    geom_point_interactive(\n            aes(tooltip=country))\n\n# Visualiza el gráfico\n# interactivo\ngirafe(ggobj = p)\n\n\n\n\n\n\nSegundo gráfico: tooltip simple con poco código html y datos de nuevas variables.\n\n\nCode\n# Versión A - Saltos de línea\n\n# Crea una variable en el data.frame\n# con el contenido del tooltip\nw$tooltip_text &lt;- paste0(\"&lt;h5 style='color:red;'&gt;&lt;strong&gt;\", \n                         w$country, \"&lt;/strong&gt;&lt;/h5&gt;\",\n                         \"&lt;strong&gt;Esperanza de vida:&lt;/strong&gt; \",\n                         w$lifeex_total,\n                         \"&lt;br&gt;&lt;strong&gt;Democracia:&lt;/strong&gt; \",\n                         w$dem_score14,\n                         \"&lt;br&gt;&lt;strong&gt;Religión:&lt;/strong&gt; \",\n                         w$religoin)\n\n# Genera el gráfico\np &lt;- ggplot(w, \n            aes(x=lifeex_total, \n                y=dem_score14))+\n    geom_point_interactive(\n            aes(tooltip=tooltip_text))\n\n# Visualiza el gráfico\n# interactivo\ngirafe(ggobj = p)\n\n\n\n\n\n\nTercer gráfico: tooltip más elaborado con una tabla html.\n\n\nCode\n# Versión B - tabla\n\n# Crea una variable en el data.frame\n# con el contenido del tooltip\nw$tooltip_text &lt;- paste0(\"&lt;style&gt;.row{border-bottom:1px solid;}&lt;/style&gt;\",\n                        \"&lt;h5 style='color:red;'&gt;&lt;strong&gt;\", \n                         w$country, \n                         \"&lt;/strong&gt;&lt;/h5&gt;\",\n                         \"&lt;table&gt;\",\"\n                         &lt;col width='180px' /&gt;\",\n                         \"&lt;col width='40px' /&gt;\",\n                         \"&lt;tr class='row' style='color:orange;'&gt;\",\n                         \"&lt;td&gt;Esperanza de vida&lt;/td&gt;\",\n                         \"&lt;td&gt;\", round(w$lifeex_total,1),\"&lt;/td&gt;\",\n                         \"&lt;/tr&gt;\",\n                         \"&lt;tr class='row' style='color:yellow;'&gt;\",\n                         \"&lt;td&gt;Democracia&lt;/td&gt;\",\n                         \"&lt;td&gt;\", round(w$dem_score14,1),\"&lt;/td&gt;\",\n                         \"&lt;/tr&gt;\",\n                         \"&lt;tr&gt;\",\n                         \"&lt;td valign='top'&gt;Religión&lt;/td&gt;\",\n                         \"&lt;td&gt;\", w$religoin,\"&lt;/td&gt;\",\n                         \"&lt;/tr&gt;\",\n                         \"&lt;/table&gt;\")\n\n# Genera el gráfico\np &lt;- ggplot(w, \n            aes(x=lifeex_total, \n                y=dem_score14))+\n    geom_point_interactive(\n            aes(tooltip=tooltip_text))\n\n# Visualiza el gráfico\n# interactivo\ngirafe(ggobj = p)\n\n\n\n\n\n\n\n\n\nCliques\nLa segunda forma de interacción que veremos es a través de cliques. En este caso, el usuario puede hacer clic en un elemento del gráfico y ser redirigido a una página web. En el siguiente ejemplo, al hacer clic en un país, se abrirá una página de Wikipedia con información sobre el país.\nEn este caso, combinamos la instrucción javascriptde windows.open(), con la dirección de la página de Wikipedia del país. Para ello, creamos una nueva variable en el data.frame con el código javascript direccionando a la página web. Luego, en la geometría geom_point_interactive añadimos la instrucción onclick con el nombre de la variable click que contiene el código javascript.\n\n\nCode\n# Retira las comillas simples\n# del nombre de los países\nw$country &lt;- gsub(\"'\",\" \",w$country)\n\n# Crea un código para abrir la\n# página de wikipedia del país\nw$click &lt;- sprintf(\n              paste0('window.open(\"http://en.wikipedia.org/wiki/', \n                     w$country, \n                     '\")'))\n\n\n# Genera el gráfico\np &lt;- ggplot(w, \n            aes(x=lifeex_total, \n                y=dem_score14))+\n    geom_point_interactive(\n            aes(onclick=click,\n                tooltip=country))\n\n# Visualiza el gráfico\n# interactivo\ngirafe(ggobj = p)\n\n\n\n\n\n\n\n\nHover\nLa tercera forma de interacción es a través del hover, que se activa al pasar el cursor sobre un elemento del gráfico. En este caso, se puede mostrar información adicional sobre el elemento sin necesidad de hacer clic. En el código abajo, al pasar el cursor sobre un país, se cambiará el color de los países de un mismo continente y los demás se pondrán semitransparentes.\n\n\nCode\nlibrary(poliscidata)\n\nw &lt;- world\n\n# Crea un tooltip con algunos datos\n# del país\nw$tooltip_text &lt;- paste0(\"&lt;strong&gt;\", w$country, \"&lt;/strong&gt;&lt;br&gt;\",\n                         \"&lt;strong&gt;Esperanza de vida:&lt;/strong&gt; \",\n                         w$lifeex_total,\n                         \"&lt;br&gt;&lt;strong&gt;Democracia:&lt;/strong&gt; \",\n                         w$dem_score14)\n\n\nlibrary(ggthemes)\nlibrary(ggplot2)\nlibrary(ggiraph)\n\n# Capa de datos\np &lt;- ggplot(w)\n\n# Añade la capa de estética\np &lt;- p +\n   aes(x = lifeex_total, \n       y = dem_score14,\n       data_id=regionun)\n\n# Añade la capa geométrica interactiva\np &lt;- p + geom_point_interactive(\n              aes(tooltip = tooltip_text)\n              )\n\n# Visualiza el gráfico interactivo\nx &lt;- girafe(ggobj = p, \n            options = \n              list(\n                opts_hover_inv(css = \"opacity:0.1;\")\n              )\n            )\n\nx\n\n\n\n\n\n\n\n\nZoom\nLa cuarta forma de interacción es a través del zoom, que permite al usuario acercar o alejar una parte del gráfico. En el siguiente ejemplo, se muestra un gráfico de dispersión con la posibilidad de hacer zoom en una región específica del gráfico por medio de un botón que aparecerá en la parte superior derecha.\n\n\nCode\nlibrary(poliscidata)\n\nw &lt;- world\n\n# Crea un tooltip con algunos datos\n# del país\nw$tooltip_text &lt;- paste0(\"&lt;strong&gt;\", w$country, \"&lt;/strong&gt;&lt;br&gt;\",\n                         \"&lt;strong&gt;Esperanza de vida:&lt;/strong&gt; \",\n                         w$lifeex_total,\n                         \"&lt;br&gt;&lt;strong&gt;Democracia:&lt;/strong&gt; \",\n                         w$dem_score14)\n\n\nlibrary(ggthemes)\nlibrary(ggplot2)\nlibrary(ggiraph)\n\n# Capa de datos\np &lt;- ggplot(w)\n\n# Añade la capa de estética\np &lt;- p +\n   aes(x = lifeex_total, \n       y = dem_score14,\n       data_id=regionun)\n\n# Añade la capa geométrica interactiva\np &lt;- p + geom_point_interactive(\n              aes(tooltip = tooltip_text)\n              )\n\n# Visualiza el gráfico interactivo\nx &lt;- girafe(ggobj = p, \n            options = \n              list(\n                opts_hover_inv(css = \"opacity:0.1;\"),\n                opts_zoom(min=1, max=3)\n              )\n            )\n\nx"
  },
  {
    "objectID": "interactivo.html#paquetes-de-gráficos-interactivos",
    "href": "interactivo.html#paquetes-de-gráficos-interactivos",
    "title": "Interactividaden los gráficos",
    "section": "Paquetes de gráficos interactivos",
    "text": "Paquetes de gráficos interactivos\nEn esta sección mencionaremos algunos de los paquetes de gráficos interactivos con los que podéis crear diferentes formas de visualización de datos. No se trata de un recuento exhaustivo, sino de una selección de paquetes que consideramos útiles y fáciles de usar. También menciono el paquete tenet que desarrollo para el análisis de textos en R, pero que contiene una serie de gráficos interactivos.\n\nggiraph\nEl primer paquete que mencionaremos es ggiraph, que permite crear gráficos interactivos con la librería ggplot2. Este paquete es muy útil para crear gráficos con la misma sintaxis de ggplot2. Trabaja con geometrías interactivas, como geom_sf_interactive, geom_point_interactive, geom_bar_interactive, entre otras, que se comportan exactamente como sus contrapartes no interactivas, pero con la posibilidad de añadir interactividad.\nPara activar la interactividad, se debe añadir la función girafe() al final del gráfico. En el siguiente ejemplo, se muestra un mapa interactivo hecho con ggiraph. Ahí queda evidente la sintaxe de ggplot2 y la facilidad de añadir interactividad a un gráfico.\n\n\nCode\nlibrary(ggthemes)\nlibrary(ggplot2)\nlibrary(ggiraph)\n\n# Lee los datos de Carolina del Norte\nnc &lt;- sf::st_read(system.file(\"shape/nc.shp\", \n                              package = \"sf\"), \n                  quiet = TRUE)\n\n# Crea un gráfico interactivo, con tooltip,\n# hover y click\ngg &lt;- ggplot(nc) +\n  geom_sf_interactive(aes(fill = AREA, \n                          tooltip = NAME, \n                          data_id = NAME,\n                          onclick =  sprintf(\"window.open(\\\"http://en.wikipedia.org/wiki/%s_County,_North_Carolina\\\")\", NAME)))+\n  theme_map()+\n  theme(legend.position = \"none\")+\n  scale_fill_continuous_tableau(palette=\"Purple\")\n  \n# Genera la versión interactiva  \nx &lt;- girafe(ggobj = gg, \n            options = \n              list(\n                opts_hover(css = ''), \n                opts_hover_inv(css = \"opacity:0.1;\")\n    )\n  )\n\n# Visualiza el gráfico\nx\n\n\n\n\n\n\n\n\nplotly\nEl paquete plotly es otro paquete muy útil para crear gráficos interactivos en R. Como ggiraph, Este paquete permite crear gráficos interactivos con la misma sintaxis de ggplot2, pero con la posibilidad de añadir interactividad. Además, plotly permite crear gráficos 3D, mapas, gráficos de barras, gráficos de dispersión, entre otros.\nAbajo vemos un ejemplo de un gráfico de dispersión interactivo hecho con plotly. En este caso, se añade un tooltip con información de cada punto y se añade un efecto de zoom para acercar o alejar una parte del gráfico.\n\n\nCode\nlibrary(plotly)\nlibrary(ggplot2)\n\n# Capa de datos\np &lt;- ggplot(w)\n\n# Añade la capa de estética\np &lt;- p +\n   aes(x = lifeex_total, \n       y = dem_score14,\n       fill=regionun)\n\n# Añade la capa geométrica\np &lt;- p + geom_point(color=\"transparent\")\n\nggplotly(p)\n\n\n\n\n\n\n\n\nVisNetwork\nSe trata de una librería de gráficos de redes interactivos. Permite crear gráficos de redes con nodos y enlaces, y añadir interactividad a través de zoom, arrastrar y soltar, y otros efectos. Permite mucho control de la interactividad y es muy útil para visualizar redes complejas.\n\n\nNetworkD3\nEl paquete networkD3 es otra librería de gráficos de redes interactivos. Basada en D3.js, permite crear gráficos de redes con nodos y enlaces, y añadir interactividad a través de zoom, arrastrar y soltar, y otros efectos. Permite mucho control de la interactividad y es muy útil para visualizar redes complejas.\n\n\nleaflet\nEl paquete leaflet es una librería de mapas interactivos. Permite crear mapas con diferentes capas, añadir marcadores, polígonos, líneas, y añadir interactividad a través de zoom, arrastrar y soltar, y otros efectos. Es muy útil para visualizar datos geoespaciales.\n\n\ntmap\nLa librería tmap es otra librería de mapas interactivos. Consiste en una alternativa eficiente a leaflet para la visualización de datos geoespaciales.\n\n\ntenet\nEl paquete tenet es un paquete que he desarrollado para el análisis de textos en R. Contiene una serie de gráficos interactivos que permiten explorar los textos de una manera más profunda. A continuación, se muestran algunos ejemplos de gráficos.\nforceDirecterTree\nEste gráfico muestra un árbol de palabras clave con un diseño de fuerza directa. Es útil para visualizar la relación entre las palabras clave y su frecuencia en un texto.\n\n\nCode\n# Carga los paquetes\nlibrary(tenet)\nlibrary(quanteda)\n\n# Crea un objeto corpus con\n# los discursos de investidura\n# de los presidentes españoles\ncp &lt;- corpus(spa.inaugural)\n    \n# Carga el diccionario de palabras\ndic &lt;- dic.pol.es\n\n# Cuenta la frecuencia\nxx &lt;- countKeywords(cp, \n                    dic.pol.es, \n                    rel.freq = F, \n                    group.var = \"President\",\n                    quiet=T)\n\n# Agrega los resultados    \nxx &lt;- aggregate(list(frequency=xx$frequency), \n                by=list(groups=xx$groups, \n                        level1=xx$level1,\n                        level2=xx$level2), \n                sum, na.rm=T)\n\n# Crea el gráfico\nforceDirectedTree(data = xx, \n                  height = 500, \n                  max.radius = 40,\n                  value_col = \"frequency\")\n\n\n\n\n\n\nplotVoronoiTree\nComo el gráfico anterior, este gráfico muestra un árbol de palabras clave, pero con un diseño de Voronoi. Se trata de una forma de treemap, pero con un diseño distinto.\n\n\nCode\n# Con los mismos datos, genera\n# un diagrama de árbol de voronoi\nplotVoronoiTree(xx, \n                value_col = \"frequency\")\n\n\n\n\n\n\nplotGrid\nLa función plotGrid permite crear una cuadrícula de gráficos interactivos. En el siguiente ejemplo, se muestra cómo crear una cuadrícula de gráficos de dispersión interactivos con plotGrid.\n\n\nCode\n# Carga los paquetes\nlibrary(tenet)\nlibrary(quanteda)\n\n# Crea un corpus con los \n# discursos de investidura\n# de los presidentes españoles\ncp &lt;- corpus(spa.inaugural)\n\n# Cuenta las palabras clave\n# del diccionario dic.pol.es \n# que he preparado como ejemplo\nxz &lt;- countKeywords(cp, \n                    dic.pol.es, \n                    rel.freq = T, \n                    group.var = \"President\",\n                    quietly = TRUE)\n\n# Agrega las frecuencias por grupo\n# del diccionario\nxx &lt;- aggregate(list(frequency=xz$frequency), \n                by=list(groups=xz$groups,\n                        level1=xz$level1,\n                        level2=xz$level2), \n                sum, na.rm=T)\n\n# Elimina los valores no\n# encontrados\nxx &lt;- xx[xx$frequency&gt;0,]\n\n# Ordena los valores por \n# level1 y level2\nxx &lt;- xx[order(xx$level1, \n               xx$level2),]\n\nxx$level2 &lt;- factor(xx$level2, \n                    levels=unique(xx$level2))\n\n\n# Crea el gráfico (estandarizado)\nplotGrid(xx, \n         x=\"groups\", \n         y=\"level2\", \n         size=\"frequency\",\n         palette=pal$cat.cartocolor.bold.11,\n         color=\"level1\", \n         standardize = TRUE,\n         interactive=TRUE,\n         height_svg = 9,\n         width_svg = 8,\n         leg.size = \"Media (%)\",\n         leg.color = \"Categoría\"\n         )\n\n\n\n\n\n\nplotChord\nLa función plotChord permite crear un gráfico de cuerdas interactivos. En el siguiente ejemplo, se muestra cómo crear un gráfico de cuerdas con plotChord.\n\n\nCode\n# Crea un corpus con los\n# discursos de investidura\ncp &lt;- quanteda::corpus(spa.inaugural)\n\n# Carga el diccionario\ndic &lt;- dic.pol.es\n\n# Genera los datos de las \n# coincidencias entre los términos\n# del diccionario en el corpus\nd &lt;- matchCodes(cp, dic, quietly = T)\n\n# Crea el gráfico de cordas\nplotChord(d, \n          from=\"term1\", \n          to=\"term2\", \n          value=\"value\")\n\n\n\n\n\n\nplotKeyness\nLa función plotKeyness permite crear un gráfico de keyness interactivos. Se trata de entender cuáles son las palabras más destacadas de un texto de referencia con relación a un corpus de otros textos.\n\n\nCode\n# Selecciona solo la\n# sesión 124 del corpus\n# de debates legislativos de\n# la XIV legislatura\n# \"Ley del Sí es Sí\"\nspa &lt;- spa.sessions[spa.sessions$session.number==124,]\n\n# Agrega los debates por partido\nre &lt;- aggregate(list(text=spa$speech.text), \n                by=list(rep.party=spa$rep.party),\n                FUN=paste, \n                collapse=\"\\n\")\n\n# Crea un corpus con los resultados\ncp &lt;- corpus(re)\n\n# Agrupa por partido\nci &lt;- corpus_group(cp, groups = rep.party)\n\n# Visualiza el gráfico\nplotKeyness(corpus = ci,\n            ref.cat = \"Vox\", \n            title = \"\")\n\n\n\n\n\n\nplotSpike\nLa función plotSpike permite crear un gráfico de dispersión léxica interactivo.\n\n\nCode\n# Agrega los debates por sesión\nag &lt;- aggregate(list(text=spa.sessions$speech.text),\n                by=list(session_number=spa.sessions$session.number),\n                paste, \n                collapse=\"\\n\")\n\n# Añade ceros para ordenar de modo correcto\n# las sesiones por números\nag$session_number[nchar(ag$session_number)==1] &lt;- \npaste0(\"00\", ag$session_number[nchar(ag$session_number)==1])\n\nag$session_number[nchar(ag$session_number)==2] &lt;- \npaste0(\"0\", ag$session_number[nchar(ag$session_number)==2])\n\n# Convierte los resultados en un corpus\nlibrary(quanteda)\ncp &lt;- corpus(ag, \n             docid_field = \"session_number\")\n\n\n# Crea un diccionario con los temas\n# territorio, género y memoria\ndic &lt;- dictionary(\n  list(Territorio=c(\"federal\",\"estatuto\",\"nacionalismo\",\n                    \"regionalismo\",\"cataluña\",\"lengua\"),\n       Género=c(\"violencia machista\",\"mujer\",\"violencia sexual\",\n                \"aborto\",\"reproductivo\",\"género\",\"\\\\btrans\\\\b\"),\n       Memoria=c(\"memoria\",\"franquismo\",\"franquista\",\"dictadura\")))\n\n\n# Busca la posición de cada palabra\n# en las sesiones\nter &lt;- filterWords(cp, dic)\n\n# Define los nombres de las sesiones.\nter$name &lt;- paste0(\"Session \", ter$name)\n\n# Crea el gráfico\nplotSpike(data=ter, \n          legend.title=\"Tema:\",\n          title=\"Congreso de los Diputados - XIV Legislatura (2019-2023)\",\n          subtitle=\"Territorio, género y memoria en los debates de los plenos.\")\n\n\n\n\n\n\nplotSankey\nLa función plotSankey permite crear un gráfico interactivo de Sankey o de aluvión. Resulta excelente para acompañar flujos o transiciones.\n\n\nCode\n# Crea un corpus con los\n# discursos de investidura\ncp &lt;- corpus(spa.inaugural)\n\n# Carga el diccionario\ndic &lt;- dic.pol.es\n\n# Cuenta las palabras clave\nxx &lt;- countKeywords(cp, \n                    dic.pol.es, \n                    rel.freq = F, \n                    group.var = \"President\",\n                    quiet=T)\n\n# Agrega las frecuencias por grupo\nxx &lt;- aggregate(list(frequency=xx$frequency), \n                by=list(groups=xx$groups, \n                        level1=xx$level1,\n                        level2=xx$level2), \n                sum, na.rm=T)\n          \n# Crea el gráfico\nplotSankey(data=xx,\n           from=\"groups\",\n           to=\"level1\",\n           value=\"frequency\")\n\n\n\n\n\n\nplotStream\nLa función plotStream permite crear un gráfico de flujo interactivo. Es ideal para visualizar la evolución de las palabras clave en un corpus a lo largo del tiempo.\n\n\nCode\n# Selecciona los diputaos más  \n# representativos de Vox\nag &lt;- spa.sessions[\n        spa.sessions$rep.name%in%\n          c(\"Abascal Conde, Santiago\",\n            \"Espinosa de los Monteros de Simón, Iván\",\n            \"Olona Choclán, Macarena\",                \n            \"Ortega Smith-Molina, Francisco Javier\"),]\n\n# Crea una variable de mes para \n# facilitar la visualización de los datos\nag$month &lt;- substr(ag$session.date,3,7)\n\n# Agrega las palabras por diputado\n# y mes\nag &lt;- aggregate(\n    list(words=ag$speech.tokens), \n      by=list(\n        month=ag$month, \n        rep=ag$rep.name, \n        party=ag$rep.party), \n      sum, \n      na.rm=T)\n\n# Ordena los datos por mes\nag &lt;- ag[order(ag$month),]\n\n# Crea el gráfico\nplotStream(ag, \n           x=\"month\", \n           y=\"words\", \n           group = \"rep\")"
  },
  {
    "objectID": "personalizacion.html",
    "href": "personalizacion.html",
    "title": "AparienciaPersonalización y temas",
    "section": "",
    "text": "En esta parte del curso, aprenderemos a personalizar los gráficos y hacerlos más atractivos. Como en las partes anteriores, utilizaremos la gramática de los gráficos incorporada en la librería ggplot2 para hacerlo. El propósito consiste en cambiar diversos elementos relacionados al aspecto y la presentación de los gráficos que facilita su interpretación y que ayudan mucho en la comunicación de los resultados."
  },
  {
    "objectID": "personalizacion.html#introducción",
    "href": "personalizacion.html#introducción",
    "title": "AparienciaPersonalización y temas",
    "section": "",
    "text": "En esta parte del curso, aprenderemos a personalizar los gráficos y hacerlos más atractivos. Como en las partes anteriores, utilizaremos la gramática de los gráficos incorporada en la librería ggplot2 para hacerlo. El propósito consiste en cambiar diversos elementos relacionados al aspecto y la presentación de los gráficos que facilita su interpretación y que ayudan mucho en la comunicación de los resultados."
  },
  {
    "objectID": "personalizacion.html#personalización-de-los-gráficos",
    "href": "personalizacion.html#personalización-de-los-gráficos",
    "title": "AparienciaPersonalización y temas",
    "section": "Personalización de los gráficos",
    "text": "Personalización de los gráficos"
  },
  {
    "objectID": "personalizacion.html#las-variables-básicas-color-forma-y-tamaño",
    "href": "personalizacion.html#las-variables-básicas-color-forma-y-tamaño",
    "title": "AparienciaPersonalización y temas",
    "section": "Las variables básicas: color, forma y tamaño",
    "text": "Las variables básicas: color, forma y tamaño\n\nColor\nEl elemento más evidente en la personalización de los gráficos es el color. En ggplot2, los colores se pueden modificar de diversas maneras. Por ejemplo, se pueden cambiar los colores de las líneas, los puntos, las barras, los textos, los fondos, entre otros.\nAdemás, los colores no van solos, sino que se combinan en paletas o escalas de colores. Las paletas de colores son conjuntos de colores que se combinan de manera armoniosa y que se utilizan para representar diferentes categorías o variables en un gráfico. Existen tres tipos fundamentales de escala de colores:\n\nsequencial - se utilizan para representar variables numéricas contínuas que van de un valor bajo a un valor alto. Por ejemplo, la población, el porcentaje de voto o el PIB per cápita.\n\n\n\n\n\n\nLa figura arriba muestra las paletas de colores secuenciales disponibles en el paquete RColorBrewer que incorpora las escalas desarrolladas por Cynthia Brewer y que se pueden explorar en ColorBrewer. Como podemos ver, los colores van de los tonos más claros a los más oscuros. En general, los colores más claros representan valores bajos y los colores más oscuros representan valores altos.\n\ndivergente - se utilizan para representar variables numéricas que tienen un punto medio o un valor de referencia. Por ejemplo, la diferencia entre dos valores, la temperatura, el cambio porcentual o la correlación.\n\n\n\n\n\n\nAhora, el punto medio de la escala tiene su centro en un color neutro -como el blanco, el gris o el amarillo- y dos escalas contrarias que marcan posiciones antagónicas. Los colores de cada una de ellas se hace más intensos a medida que se alejan del centro.\n\ncualitativo - se utilizan para representar variables categóricas o nominales. Por ejemplo, los países, los partidos políticos, los tipos de productos o los colores.\n\n\n\n\n\n\nTales escalas permiten representar valores que no poseen un orden o una jerarquía. Por lo tanto, los colores se utilizan para diferenciar las categorías y no para representar valores numéricos. De ese modo, no hay un patrón jerárquico ascendiente, descendiente o centrífugo. El objetivo consiste en diferenciar al máximo las categorías entre sí, sin establecer una relación de jerarquía entre ellas.\nDe ese modo, debemos emplear diferentes escalas de color de acuerdo con el tipo de información que disponemos. Por ejemplo, si queremos representar la evolución de una variable a lo largo del tiempo, es mejor utilizar una escala de color secuencial. Si queremos representar la diferencia entre dos valores, es mejor utilizar una escala de color divergente. Si queremos representar diferentes categorías, es mejor utilizar una escala de color cualitativa.\nAdemás, en un gráfico de ggplot2 hay dos elementos que se somente a la manipulación del color: el fill y el color. El fill se utiliza para rellenar áreas -de las barras, líneas, puntos, polígonos, entre otros-. El color, por otra parte, se utiliza para cambiar el color de los bordes.\nLas funciones relacionadas a las escalas de color, por lo tanto, respetan eso dos ejes: el tipo de escala (secuencial, divergente o cualitativa) y si se trata de color (color) o relleno (fill).\nEl gráfico de cajas (boxplot) abajo es el mismo de la sección anterior. No obstante, ahora añadimos un elemento más al gráfico: la escala de color scale_color_brewer y seleccionamos la paleta cualitativa llamada Dark2. Aprovechamos también para cambiar el título de la leyenda para “Región” (name=“Región”). Vemos que los colores de relleno de las cajas cambian para corresponder a la nueva escala de color.\nEl gráfico original:\n\n\nCode\n# carga los datos y\n# el paquete ggplot2\nlibrary(poliscidata)\nlibrary(ggplot2)\n\n# Datos sobre los estados\n# de EE. UU.\nd &lt;- states \n\n# Crea el gráfico de cajas (boxplot)\np &lt;- ggplot(data = d,\n            mapping = aes(x=unemploy, \n                          y=region,\n                          color=region,\n                          group=region)) + \n        geom_boxplot(width=0.1)\n\np\n\n\n\n\n\n\nEl gráfico con la nueva escala:\n\n\nCode\np &lt;- p + scale_color_brewer(name=\"Región\",\n                           palette=\"Dark2\")\n\np\n\n\n\n\n\n\nAhora, emplearemos el atributo fill para cambiar el color de relleno. Para ello, en lugar de emplear color en la capa de estética, cambiaremos para fill y a scale_fill_brewer. Veamos la diferencia en un nuevo gráfico:\n\n\nCode\n# carga los datos y\n# el paquete ggplot2\nlibrary(poliscidata)\nlibrary(ggplot2)\n\n# Datos sobre los estados\n# de EE. UU.\nd &lt;- states \n\n# Crea el gráfico de cajas (boxplot)\np &lt;- ggplot(data = d,\n            mapping = aes(x=unemploy, \n                          y=region,\n                          fill=region,\n                          group=region)) + \n        geom_boxplot(width=0.1)\n\np\n\n\n\n\n\nCode\np &lt;- p + scale_color_brewer(name=\"Región\", \n                            palette=\"Dark2\")\n\np\n\n\n\n\n\nY si quiero elegir los colores, ¿qué hago? Sencillo, debes elegir la escala de color o relleno manual:\n\n\nCode\np &lt;- p + scale_fill_manual(values=c(\"red3\",\n                                     \"steelblue\",\n                                     \"darkgreen\",\n                                     \"purple\"))\n\np\n\n\n\n\n\n\n\nFormas y símbolos\nOtro elemento visual que podemos adaptar a nuestros intereses son las formas o los símbolos. Por ejemplo, en algunas publicaciones, piden a los autores que generen gráficos en blanco y negro o escala de grises. En esos casos, toca emplear otros recursos visuales. En un diagrama de dispersión podemos querer emplear distintos tipos de símbolo (círculos, cuadrados, triángulos o rombos, por ejemplo) para diferencias entre categorías.\nPara ello, empleamos el parámetro shape en la capa estética para definir que a una variable determinada corresponderá un símbolo único. Reutilizaremos el código para el gráfico de dispersión de la sección anterior para establecer el continente (regionun) como variable que determinará la forma de los puntos en el gráfico:\n\n\nCode\nlibrary(poliscidata)\n\n# Empleamos los datos de paises\n# y excluimos los casos en los\n# que no hay información sobre\n# la religión\nw &lt;- world\nw &lt;- w[! is.na(w$religoin),]\n\nlibrary(ggplot2)\n\n# Crea el gráfico\np &lt;- ggplot(w)\n\n# Capa estética con la religión\n# como color\np &lt;- p + aes(x=hdi, \n            y=dem_score14,\n            shape=regionun)\n\n# Capa geométrica\np &lt;- p + geom_point()\n\n# Visualiza el gráfico\np\n\n\n\n\n\n\n\nTamaño\nFinalmente, el tamaño representa la tercera variable visual que nos ocuparemos aquí. El parámetro sizepermite escalonar las observaciones del gráfico para que se destaquen en función de una variable numérica. En el siguiente gráfico de dispersión, empleamos el tamaño de los puntos para representar la población total de los países.\n\n\nCode\nlibrary(ggplot2)\n\n# Crea el gráfico\np &lt;- ggplot(w)\n\n# Capa estética con la religión\n# como color\np &lt;- p + aes(x=hdi, \n            y=dem_score14,\n            size=pop_total)\n\n# Capa geométrica\np &lt;- p + geom_point()\n\n# Visualiza el gráfico\np"
  },
  {
    "objectID": "personalizacion.html#texto",
    "href": "personalizacion.html#texto",
    "title": "AparienciaPersonalización y temas",
    "section": "Texto",
    "text": "Texto\nLa gran mayoría de los gráficos incluye un conjunto de elementos de texto: títulos, ejes, etiquetas, leyendas, entre otros. Una buena elección de título, su tamaño y posición, por ejemplo, puede hacer que el gráfico sea más fácil de entender. En gráficos científicos, resulta obligatorio añadir información las fuentes de los datos. El tipo de fuente también puede ser manipulado para mejorar la legibilidad del gráfico o para atraer la atención. Por esa razón, en este apartado veremos cómo manipular los elementos textuales de los gráficos. Nos concentraremos en tres elementos concretos: las fuentes o tipografías, los títulos y las etiquetas.\n\nFuentes\nLas fuentes tipográficas pueden personalizar un gráfico y ayudar a convertirlo en algo más atractivo. En ggplot2, la función theme permite manipular los elementos textuales de un gráfico. Para cambiar la fuente de un gráfico, empleamos el atributo family en la función element_text. No obstante, muchas geometrías de ggplot2 tienen un atributo family que permite cambiar la fuente de un elemento específico.\nA continuación, mostramos cómo cambiar la fuente de un gráfico de dispersión con dos fuentes descargadas de Google Fonts: Griffy y Mr Bedfort. Para ello, empleamos la función theme y element_text para cambiar la fuente de los elementos textuales del gráfico:\n\n\nCode\np + theme(text=element_text(family=\"Griffy\",\n                            size=20,\n                            face=\"bold\"))\n\n\n\n\n\nCode\np + theme(text=element_text(family=\"Mr Bedfort\", \n                            size=16))\n\n\n\n\n\n\n\nTítulos\n¿Qué hacemos con un gráfico sin títulos? Pues, no sabríamos qué estamos viendo. Los títulos son esenciales para la interpretación de los gráficos. Los ejes también deben estar bien etiquetados para que el lector pueda entender qué está viendo.\nEn ggplot2, los títulos se pueden añadir a través de la función labs. Esta función permite añadir títulos a los ejes, la leyenda y el gráfico en general. A continuación, mostramos cómo añadir un título al gráfico de dispersión de la sección anterior:\n\n\nCode\np &lt;- p + labs(title=\"Índice de Desarrollo Humano vs. Democracia\",\n               subtitle= \"Países del mundo\",\n               x=\"Índice de Desarrollo Humano\",\n               y=\"Democracia\",\n               caption=\"Fuente: paquete poliscidata.\",\n               size=\"Población\")\n\np\n\n\n\n\n\nUna curiosidad. Si os habéis fijado bien, hemos añadido un parámetro size=“Población” a los textos. Este parámetro permite añadir un título a la leyenda de tamaño del gráfico. Si hubiéramos añadido una variable de color, podríamos añadir el título de la leyenda de color con el parámetro color=“Religión”. Hagámoslo:\n\n\nCode\n# Añade la religión como color en\n# la capa de estética\np &lt;- p + aes(color=religoin)\n\n# Añade el título de la leyenda de color\np &lt;- p + labs(color=\"Religión\")\n\n# Muestra el gráfico\np\n\n\n\n\n\nComo podéis ver, lo que había hecho antes se quedó y he ido añadiendo cosas. Esa es una de las principales ventajas de ggplot2: la capacidad de añadir elementos a un gráfico de forma sencilla y rápida.\n\n\nEtiquetas de valores\nEn algunos casos, es necesario añadir etiquetas a los valores de un gráfico. Por ejemplo, en un gráfico de dispersión, puede ser útil añadir el nombre de los países a los puntos. Para ello, empleamos la función geom_text o geom_text_repel del paquete ggrepel. La función geom_text añade etiquetas a los puntos del gráfico, mientras que geom_text_repel añade etiquetas que no se solapan entre sí. A continuación, mostramos cómo añadir etiquetas a los puntos del gráfico de dispersión de la sección anterior:\n\n\nCode\np &lt;- ggplot(d, aes(x=abort_rate08, \n                   y=obama08))+\n        geom_point()\n\n\np + geom_text(aes(label=stateid), \n              hjust=0, \n              vjust=0)\n\n\n\n\n\nEl próximo gráfico muestra cómo utilizar la función geom_text_repel para añadir etiquetas a los puntos del gráfico de dispersión. En este caso, las etiquetas no se solapan entre sí:\n\n\nCode\n# Carga el paquete\nlibrary(ggrepel)\n\n# Añade las etiquetas\np + geom_text_repel(\n        aes(label=stateid), \n            hjust=0, \n            vjust=0,\n            check_overlap = TRUE)"
  },
  {
    "objectID": "personalizacion.html#temas",
    "href": "personalizacion.html#temas",
    "title": "AparienciaPersonalización y temas",
    "section": "Temas",
    "text": "Temas\nLos temas son una forma de personalizar la apariencia de un gráfico. Tienen una enorme utilidad, porque permiten cambiar la apariencia de un gráfico de forma rápida y sencilla y, además, garantizar un estilo único para los gráficos de un proyecto. Por ejemplo, si estoy escribiendo la tesis doctoral y quiero garantizar que todos mis gráficos tengan la misma apariencia, puedo crear un tema personalizado y aplicarlo a todos los gráficos. Este trabajo sería mucho más laborioso sin el uso de los temas.\nEn ggplot2, los temas permiten cambiar la apariencia de los elementos del gráfico, como el fondo, los ejes, las etiquetas, entre otros. La función theme permite cambiar el tema de un gráfico. Existe una cantidad enorme de temas predefinidos en ggplot2 o en paquetes adicionales como ggthemes o tvthemes, pero también es posible crear un tema personalizado.\n\nTemas predefinidos\nEn paquete ggplot2 posee una serie de temas predefinidos que permiten cambiar la apariencia de un gráfico. Son conjunto de instrucciones que definen la apariencia de los elementos de un gráfico, como la fuente, los colores, el fondo, los ejes, entre otros.El código abajo muestra cómo cambiar el tema de un gráfico de dispersión a un tema predefinido de ggplot2:\n\n\nCode\np &lt;- ggplot(d, aes(x=abort_rate08, \n                   y=obama08))+\n        geom_point()+\n        labs(title=\"Aborto y voto en Obama\",\n             subtitle=\"Tasa de aborto y voto en Obama en los estados de EE. UU. en 2008.\",\n             x=\"Tasa de aborto\",\n             y=\"Votos para Obama\",\n             caption=\"Fuente: paquete poliscidata.\")\n\np &lt;- p + theme_classic()\n\np + geom_text_repel(\n        aes(label=stateid), \n            hjust=0, \n            vjust=0,\n            check_overlap = TRUE)\n\n\n\n\n\nSi comparamos con la versión anterior del mismo gráfico, vemos que hay una mejoría significativa en la presentación. El tema theme_classic es uno de los temas predefinidos de ggplot2. Otros temas predefinidos son theme_minimal, theme_light, theme_dark, theme_bw, entre otros. No hay colores y muy pocos elementos decorativos, algo que convierte el gráfico en particularmente atractivo para visualizar los patrones.\nPodemos utilizar el tema de los Simpsons del paquete tvthemes para cambiar la apariencia de un gráfico.\n\n\nCode\nlibrary(tvthemes)\n\np + theme_simpsons()\n\n\n\n\n\n\n\nPersonalización de los temas\nSi los temas predefinidos no son suficientes, es posible personalizar un tema detalle por detalle. Para ello, se utiliza la función theme y se añaden los elementos que se desean personalizar. Tomemos como ejemplo el ridge plot que creamos anteriormente.\n\n\nCode\n# Carga los paquetes\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Crea el gráfico\n# con la relación entre \n# fraccionamiento étnico y religión\np &lt;- ggplot(w,\n            aes(x=frac_eth, \n                y=religoin, \n                fill=religoin))\n\n# Añade la capa de geometría\np &lt;- p + geom_density_ridges()\n\n# Visualiza los resultados\np\n\n\n\n\n\nCambiemos una serie de elementos para hacerlo más atractivo:\n\n\nCode\n# Añadimos un título y los nombres de los ejes\np &lt;- p + labs(title=\"**Fraccionamiento étnico y religión**\",\n              x=\"Fraccionamiento étnico\",\n              y=\"\",\n              caption=\"Fuente: paquete poliscidata.\",\n              fill=\"Religión\")\n\n# Cargamos el paquete ggtext\n# que permite personalizar la \n# apariencia de los textos\nlibrary(ggtext)\n\n# Personalizamos la aparencia\np &lt;- p + theme(text=element_text(family=\"Kranky\"), # Fuente\n        legend.position = \"bottom\", # Leyenda abajo\n        plot.title = element_markdown(size=20), # Título en markdown\n        panel.background = element_rect(fill=\"white\")\n)\n\n# Cambiamos la escala de color\n# para la de juego de tronos\n# del paquete tvthemes\np + scale_fill_westeros()"
  },
  {
    "objectID": "recursos.html",
    "href": "recursos.html",
    "title": "Recursos útiles para la visualización de datos",
    "section": "",
    "text": "Existen muchos proyectos que nos ayudan a crear visualizaciones de datos hermosas y efectivas. Algunos de ellos son recursos extremadamente útiles y repositorios de código disponibles para nosotros.\n\n\nLa página web Dataviz inspiration provee hermosos gráficos e historias de datos. Estos ejemplos curados nos ayudan a visualizar el potencial completo de la visualización de datos y a obtener algunas ideas que podemos usar para nuestros propios análisis. Uno de los ejemplos sobresalientes es Ailing Brussels, un análisis de la desigualdad en Bruselas por la revista belga de investigación Medór. El proyecto emplea mapas, gráficos, animación y una narrativa convincente a través de imágenes, textos y videos para describir la división espacial de Bruselas en cuanto a oportunidades y niveles de precariedad.\n\n\n\n\n\nVisite ambos sitios, Dataviz Inspirations y Ailing Brussels, para tener una maravillosa experiencia de las posibilidades de la visualización de datos.\n\n\n\nEl segundo recurso es el Proyecto Data to Viz. Es el resultado de un gran esfuerzo de sistematización. Yan Holtz, el creador, organizó gráficos según el tipo de datos o el tipo de análisis. Cada gráfico tiene su propia página explicando cómo y en qué ocasión se debe usar o evitar. También proporciona acceso a R Graph Gallery con código detallado que muestra cómo replicarlo en R.\n\n\n\n\n\n\n\n\nComo se mencionó anteriormente, esta página web es un repositorio que contiene código para que los usuarios reproduzcan muchos tipos diferentes de gráficos en R. ¿Cómo puedo hacer un gráfico de dispersión en R? Mire la galería y lo descubrirá. ¿Y un gráfico de barras? Lo mismo. Este es un lugar obligatorio para buscar cuando se aprende visualización de datos."
  },
  {
    "objectID": "recursos.html#introducción",
    "href": "recursos.html#introducción",
    "title": "Recursos útiles para la visualización de datos",
    "section": "",
    "text": "Existen muchos proyectos que nos ayudan a crear visualizaciones de datos hermosas y efectivas. Algunos de ellos son recursos extremadamente útiles y repositorios de código disponibles para nosotros.\n\n\nLa página web Dataviz inspiration provee hermosos gráficos e historias de datos. Estos ejemplos curados nos ayudan a visualizar el potencial completo de la visualización de datos y a obtener algunas ideas que podemos usar para nuestros propios análisis. Uno de los ejemplos sobresalientes es Ailing Brussels, un análisis de la desigualdad en Bruselas por la revista belga de investigación Medór. El proyecto emplea mapas, gráficos, animación y una narrativa convincente a través de imágenes, textos y videos para describir la división espacial de Bruselas en cuanto a oportunidades y niveles de precariedad.\n\n\n\n\n\nVisite ambos sitios, Dataviz Inspirations y Ailing Brussels, para tener una maravillosa experiencia de las posibilidades de la visualización de datos.\n\n\n\nEl segundo recurso es el Proyecto Data to Viz. Es el resultado de un gran esfuerzo de sistematización. Yan Holtz, el creador, organizó gráficos según el tipo de datos o el tipo de análisis. Cada gráfico tiene su propia página explicando cómo y en qué ocasión se debe usar o evitar. También proporciona acceso a R Graph Gallery con código detallado que muestra cómo replicarlo en R.\n\n\n\n\n\n\n\n\nComo se mencionó anteriormente, esta página web es un repositorio que contiene código para que los usuarios reproduzcan muchos tipos diferentes de gráficos en R. ¿Cómo puedo hacer un gráfico de dispersión en R? Mire la galería y lo descubrirá. ¿Y un gráfico de barras? Lo mismo. Este es un lugar obligatorio para buscar cuando se aprende visualización de datos."
  },
  {
    "objectID": "recursos.html#proyectos-hermosos",
    "href": "recursos.html#proyectos-hermosos",
    "title": "Recursos útiles para la visualización de datos",
    "section": "Proyectos hermosos",
    "text": "Proyectos hermosos\nEn esta sección, presentamos algunos proyectos que nos inspiran y nos muestran cómo la visualización de datos puede ser hermosa y efectiva.\n\nDear Data\nSe trata de un proyecto de dos diseñadoras, Giorgia Lupi y Stefanie Posavec, que consiste en enviar postales semanales con datos personales dibujados a mano. Cada semana, durante un año, las dos diseñadoras recopilaron datos sobre sus vidas cotidianas y los representaron en postales. El proyecto resultante es una colección de visualizaciones de datos dibujadas a mano que revelan la belleza de los datos y la creatividad de las diseñadoras. El proyecto también se convirtió en un libro, Dear Data, que recopila las postales y las visualizaciones de datos.\nUn breve video explicando el proyecto:\n\nLa metodología empleada explicada con más detalle:\n\n\n\n\nEspaña vive en pisos (El Diario.es)\nEste proyecto de El Diario.es es un ejemplo de cómo la visualización de datos puede ser utilizada para contar historias complejas. El proyecto visualiza la distribución de la población en España y cómo la mayoría de la gente vive en pisos. La visualización combina mapas, gráficos y narrativa para contar la historia de cómo la mayoría de la gente en España vive en pisos y cómo esto afecta a la calidad de vida y la desigualdad en el país.\nNo se trata de la única visualización premiada. A día de hoy, el periódico posee el equipo de periodismo de datos más destacado de España y uno de los más reconocidos a nivel internacional.\n\n\n\n\n\n\n\nEl Atlas de los ODS\nEl Atlas de los Objetivos de Desarrollo Sostenible (ODS) es un proyecto de la División de Datos del Banco Mundial que visualiza los datos de los ODS en un formato interactivo y accesible. El Atlas proporciona visualizaciones de datos sobre los 17 ODS y los 169 objetivos específicos de los ODS. Los datos se presentan en mapas, gráficos y tablas interactivas que permiten a los usuarios explorar los datos y comparar los indicadores de los ODS en diferentes países y regiones. El Atlas es una herramienta valiosa para los responsables de la toma de decisiones, los investigadores y el público en general que deseen comprender mejor los desafíos y las oportunidades relacionados con los ODS.\n\n\n\n\n\n\n\nPoppy field\nValentina D’Fillipo creó una visualización para conmemorar el centenario de la Primera Guerra Mundial. La visualización muestra la cantidad de soldados que murieron en las guerras ocurridas durante el período comprendido entre 1914 y 2014, representados por amapolas. La visualización es interactiva y permite a los usuarios explorar la cantidad de soldados que murieron en cada país y en cada año en las distintas guerras. La visualización es hermosa y efectiva, y nos recuerda la importancia de la visualización de datos para contar historias y evitar el olvido de eventos históricos importantes.\n\n\n\n\n\n\n\nVisual Cinnamon\nVisual Cinnamon es la página personal de la diseñadora visual Nadieh Bremer. Se trata de una fuente de inspiración para cualquier persona interesada en la visualización de datos. Nadieh es conocida por su estilo único y su habilidad para combinar datos y diseño de una manera hermosa y efectiva. Su portafolio incluye visualizaciones de datos sobre temas como la música, la astronomía y la historia.\nAlgunos ejemplos de su trabajo que me gustan particularmente:\n\nPatrimonio cultural intangible (UNESCO)\nSe trata de una visualización interactiva que muestra el patrimonio cultural intangible de la UNESCO. Incorpora diversos tipos de gráfico y nos permite sacar ideas de qué podemos hacer con diferentes tipos de dato.\n\n\n\n\n\n\n\n¿Por qué los gatos y perros…? (Google)\nEn esta visualización, Nadieh explora las preguntas más comunes sobre gatos y perros en Google. Nos recuerda la estructura jerárquica del lenguaje y cómo podemos representar las alternativas variantes de forma visualmente impactante y efectiva."
  },
  {
    "objectID": "tipos.html",
    "href": "tipos.html",
    "title": "Tiposde gráfico",
    "section": "",
    "text": "En esta parte del curso examinaremos algunos de los tipos más comunes de gráfico. Los organizaremos según el tipo de análisis que se desea realizar con ellos. Por ejemplo, si queremos saber si una variable cuantitativa afecta otra igual, realizamos un gráfico de dispersión o un correlograma. si el objetivo es saber la frecuencia de una variable categórica, un gráfico de barras puede ser la mejor opción."
  },
  {
    "objectID": "tipos.html#introducción",
    "href": "tipos.html#introducción",
    "title": "Tiposde gráfico",
    "section": "",
    "text": "En esta parte del curso examinaremos algunos de los tipos más comunes de gráfico. Los organizaremos según el tipo de análisis que se desea realizar con ellos. Por ejemplo, si queremos saber si una variable cuantitativa afecta otra igual, realizamos un gráfico de dispersión o un correlograma. si el objetivo es saber la frecuencia de una variable categórica, un gráfico de barras puede ser la mejor opción."
  },
  {
    "objectID": "tipos.html#tipos-de-dato-y-tipos-de-gráficos",
    "href": "tipos.html#tipos-de-dato-y-tipos-de-gráficos",
    "title": "Tiposde gráfico",
    "section": "Tipos de dato y tipos de gráficos",
    "text": "Tipos de dato y tipos de gráficos\nCada tipo de gráfico suele corresponder a un tipo de dato o a una combinación entre tipos de dato. Por esa razón, resulta útil conocer la clasificación de los gráficos según los diferentes tipos de información para sacar los mejores resultados.\nLa página from Data to Viz resulta muy útil, pues ofrece una doble clasificación de los datos: por tipo de dato y el tipo de representación que se desea realizar. Recomiendo fuertemente que la estudiéis con detenimiento para tener una idea general de qué opciones tenéis. Luego, podréis regresar a la página para refrescar los conceptos y encontrar ejemplos, así como los códigos. Se trata de una herramienta muy útil a la hora de elegir el tipo de visualización que queremos para nuestros datos."
  },
  {
    "objectID": "tipos.html#distribución",
    "href": "tipos.html#distribución",
    "title": "Tiposde gráfico",
    "section": "Distribución",
    "text": "Distribución\nLos gráficos de distribución son útiles para entender cómo se distribuyen los datos. ¿Cuál categoría es la más frecuente? ¿Los votos en un partido X en las mesas de Sevilla se encuentran concentrados alrededor de la media o varían mucho? Las visualizaciones de este apartado ayudan a responder a dichas preguntas. En este grupo se encuentran los histogramas, los gráficos de densidad, los diagramas de caja (boxplots) o los de violín (violin).\n\nGráficos de barras\nEl gráfico de barras es uno de los más comunes y útiles. Se utiliza para representar la frecuencia de una variable categórica. Por ejemplo, si queremos saber cuántos votos ha obtenido cada partido en una elección, un gráfico de barras es la mejor opción. Esto nos permite comparar los valores y sacar conclusiones y patrones a partir de ellos.\nEl código abajo crea un gráfico de barra para la variable pot_policy de la base de datos de los estados de EE. UU. La variable pot_policy representa la política relacionada a la legalización de la marijuana dominante en cada estado.\nAdemás, para no aburrirnos, también vamos a crear un gráfico de barras polar. Este tipo de gráfico es útil cuando queremos comparar la frecuencia de una variable categórica en un círculo. En este caso, la variable pot_policy se encuentra en el eje x y el eje y representa la frecuencia de cada categoría. Como veréis, se trata del mismo gráfico. Lo único que cambia es el sistema de coordenadas.\n\n\nCode\n# Carga los datos\nlibrary(poliscidata)\n\n# Crea un data.frame d\n# con los datos de los estados\nd &lt;- states\n\n\n# reordena de modo decreciente de \n# la frecuencia\nd$pot_policy &lt;- reorder(\n                       d$pot_policy, \n                       d$pot_policy, \n                       function(x) -length(x))\n\n#\nlibrary(ggplot2)\n\n# 1) Crea la capa de datos\np &lt;- ggplot(data = d)\n\n# 2 ) Añade la capa de estética\np &lt;- p + aes(x=pot_policy) \n\n# 3) Añade la capa de geometría\np &lt;- p + geom_bar()\n\n# Visualiza el gráfico\np\n\n\n\n\n\nCode\n# 4) Añade la capa de coordenadas \n# (en este caso polares)\np + coord_polar()\n\n\n\n\n\n\n\nHistograma\nEl histograma es una visualización muy útil para entender la distribución de una variable cuantitativa. Se divide en intervalos que contienen el número de observaciones (en nuestro caso estados) con valores entre los límites de cada uno de ellos.\nEn el siguiente código, creamos un histograma para la variable pop2010 de la base de datos de los estados de EE. UU. La variable pop2010 representa la población de cada estado en el año 2010.\n\n\nCode\nlibrary(ggplot2)\n\n# Crea el histograma para pop2010\np &lt;- ggplot(d, aes(pop2010))+\n  \n      # Adicional la geometría con 8 intervalos\n      geom_histogram(bins = 8)\n\n# Visualiza\np\n\n\n\n\n\nComo podemos ver, el patrón común de los datos de población se revela: muchos estados con poca población y unos pocos con mucha. Ese comportamiento suele pasar también en municipios, países, etc.\n\n\nDensidad\nEl gráfico de densidad es similar al histograma, pero en lugar de contar el número de observaciones en un intervalo, muestra una curva que representa la densidad de probabilidad de la variable. En otras palabras, el área bajo la curva es igual a 1.\n\n\nCode\nlibrary(ggplot2)\n\n# Crea el gráfico de densidad de pop2010\np &lt;- ggplot(d, aes(pop2010))+\n  \n      # Adiciona la geometría de densidad\n      geom_density()\n\n# Visualiza\np\n\n\n\n\n\nComo vemos, la curva de densidad nos muestra que la mayoría de los estados tienen una población baja, pero hay algunos con una población muy alta. Se trata de la misma información que en el histograma anterior, pero no hay cortes bruscos como los generados por los intervalos. Esa característica evita posibles distorsiones ocasionadas por la elección del número o del tamaño de los intervalos.\n\n\nBoxplot\nOtro gráfico de distribución muy útil es el boxplot. Este gráfico muestra la distribución de una variable cuantitativa a través de cinco estadísticas: el mínimo, el primer cuartil, la mediana, el tercer cuartil y el máximo. Además, también muestra los valores atípicos (outliers). Se emplea para analizar la dispersión y la simetría de los datos. Un diagrama donde las partes son simétricas y la caja resulta muy pequeña indica que los datos están muy concentrados alrededor de la mediana. Por otro lado, una caja grande y asimétrica indica que los datos están dispersos y que hay una mayor dispersión hacia los mayores o menores valores.\nEl gráfico abajo crea un boxplot para la variable que mide el porcentaje de desempleo (unemploy) en cada estado. Para añadir valor, elegimos agrupar los estados por región para saber si existe algún patrón territorial en la distribución del paro en EE. UU.\nLos parámetros fill y group son necesarios para que el gráfico muestre una caja por cada región. En el primer caso, se atribuye un color a cada región y group se encarga de que cada región tenga su propia caja.\n\n\nCode\np &lt;- ggplot(data = d,\n            mapping = aes(x=unemploy, \n                          y=region,\n                          fill=region,\n                          group=region)) + \n        geom_boxplot(width=0.1)\n\np\n\n\n\n\n\nVemos claramente dos patrones. De un lado, se encuentra el Oeste con estados con poco paro y otros con una tasa elevada. La dispersión resulta alta, tanto por los “bigotes” como por el tamaño de la caja. Además, los valores altos se encuentran más dispersos, pues la caja es más grande en la parte derecha. Por otro lado, el Noreste tiene una tasa de paro más concentrada, aunque la dispersión resulta mayor en la parte superior de la caja.\n\n\nViolin plot\nEl violin plot es una combinación de un boxplot y un density plot. Muestra la distribución de una variable cuantitativa y la densidad de probabilidad de la misma. Es útil para comparar distribuciones entre diferentes grupos. En el siguiente gráfico, creamos un violin plot para la variable unemploy (tasa de paro) agrupada por región. Vemos que resulta muy parecido al boxplot anterior, pero con la ventaja de mostrar la densidad de probabilidad de la variable, es decir, dónde se concentran los valores. Aprovechamos para añadir los puntos de cada observación con geom_jitter. Así queda más fácil entender por qué el gráfico tiene la forma que tiene.\n\n\nCode\np &lt;- ggplot(data = d,\n            mapping = aes(x=unemploy, \n                          y=region,\n                          group=region)) + \n        geom_violin()+\n        geom_jitter(aes(color=region))\n\np\n\n\n\n\n\n\n\nLollipop\nEl gráfico de lollipop es una variante del gráfico de barras. En lugar de barras, se utilizan segmentos de línea para representar las frecuencias de las categorías. Es útil cuando se quiere resaltar una categoría en particular. En el siguiente gráfico, creamos un lollipop para la variable abort_rank3, que representa la clasificación de los estados según su legislación sobre el aborto.\nMientras que en los casos anteriores, cada gráfico tenía una sola geometría, en el lollipop se combinan dos: geom_point (punto) y geom_segment (segmento de línea). Esta estrategia resulta muy común en la creación de visualizaciones originales y personalizadas. Dominar la combinación entre geometrías puede ser muy útil para crear gráficos más complejos y atractivos.\n\n\nCode\nlibrary(ggplot2)\n\n# Crea una tabla ordenada con los\n# valores de abort_rank3\ntb &lt;- sort(table(d$abort_rank3))\n\n# La convierte en base de datos\n# para la función ggplot\ntb &lt;- data.frame(tb)\n\n# Crea el gráfico de lollipop\np &lt;- ggplot(tb, \n            aes(y=Var1, \n                x=Freq)) +\n  \n  # Añade los puntos rojos\n  geom_point(color=\"red\") + \n  \n  # Añade los segmentos\n  geom_segment( aes(y=Var1, \n                    yend=Var1, \n                    x=0, \n                    xend=Freq))\n\n# Dibuja el gráfico\np\n\n\n\n\n\n\n\nTreemap\nUn treemap es un gráfico de proporciones representadas por áreas o rectángulos. Cuanto mayor sea el área, mayor será la frecuencia de una categoría dada (representada por un rectángulo). La principal ventaja de los treemaps es que permite representar datos jerárquicos. Por lo tanto, los grupos y subgrupos dentro de ellos pueden visualizarse fácilmente. Además, los treemaps permiten sintetizar muchos datos en un espacio relativamente pequeño.\n\n\nCode\nlibrary(ggplot2)\n\n# Carga el paquete treemapify\nlibrary(treemapify)\n\n# Crea una tabla ordenada con\n# las políticas de control de\n# la marijuana\ntb &lt;- sort(table(d$pot_policy))\n\n# Convierte en base de datos\ntb &lt;- data.frame(tb)\n\n# Crea el treemap usando la\n# geometría geom_treemap()\n# del paquete teemapify\n\n# Inicialmente, define\n# el gráfico con el área, color\n# y etiqueta\np &lt;- ggplot(tb, \n            aes(area = Freq, \n                fill = Var1, \n                label=Var1)) +\n  \n  # Añade la geometría de\n  # treemap al gráfico\n  geom_treemap()\n\n# Visualiza el resultado\np\n\n\n\n\n\n\n\nBeeSwarm\nEl gráfico de beeswarm es una variante del scatter plot que permite visualizar la distribución de una variable cuantitativa en función de una variable categórica. Es útil para comparar la distribución de una variable cuantitativa entre diferentes grupos. En el siguiente gráfico, creamos un beeswarm para la variable pop_65_older (población de 65 años o más) agrupada por el nivel de democracia de los países. Además, añadimos el color según la religión de los países.\nComo vemos, también se parece mucho al violin plot anterior. Sin embargo, el beeswarm tiene la ventaja de mostrar cada observación individual, lo que puede ser útil para detectar patrones o valores atípicos. Además, resulta más atractivo visualmente, pues los puntos no se superponen y se distribuyen de forma más uniforme. En este caso, añadimos la religión como información adicional para intentar encontrar algún patrón en los datos.\n\n\nCode\nw &lt;- world\n\n# Carga los paquetes necesarios\nlibrary(ggplot2)        \nlibrary(ggbeeswarm)      \n\n# Crea el gráfico con el nivel de democracia\n# y la población de 65 años o más\n# con color según la religión\np &lt;- ggplot(data = w,\n            mapping = aes(x=dem_level4, \n                          y=pop_65_older, \n                          color=religoin)) \n\n# Añadimos la geometría: geom_quasirandom()\np &lt;- p + geom_quasirandom(size=1.5)\n\n# Visualizamos los resultados\np\n\n\n\n\n\nComo vemos, las poblaciones de las democracias plenas presentan una mayor proporción de personas de 65 años o más. La autocracia, por otro lado, presenta una población más joven. Además, parece que la religión predominantes en los países con mayor proporción de personas de 65 años y más democráticos es el cristianismo, mientras que los más jóvenes y autoritarios son en su mayor parte de mayoría musulmana.\n\n\nRidge Plot\nEl gráfico de ridge es una variante del density plot que permite visualizar la distribución de una variable cuantitativa en función de una variable categórica. Es útil para comparar la distribución de una variable cuantitativa entre diferentes grupos. En el siguiente gráfico, creamos un ridge para la variable frac_eth (fracción de etnias) agrupada por la religión de los países.\n\n\nCode\n# Carga los paquetes\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Crea el gráfico\n# con la relación entre \n# fraccionamiento étnico y religión\np &lt;- ggplot(w,\n            aes(x=frac_eth, \n                y=religoin, \n                fill=religoin))\n\n# Añade la capa de geometría\np &lt;- p + geom_density_ridges()\n\n# Visualiza los resultados\np\n\n\n\n\n\nComo vemos, la distribución de la fracción étnica varía según la religión predominante en los países. Los países con mayoría musulmana presentan una mayor fracción étnica, mientras que los países con mayoría católica presentan una menor fracción étnica. Además, los países con mayoría musulmana presentan una distribución más dispersa, mientras que los países con mayoría budista presentan una distribución más concentrada. La categoría “otros cristianos” presenta una distribución más dispersa, con dos picos.\n\n\nRaincloud Chart\nEl gráfico de raincloud resulta muy divertido. Combina un violin plot, un box plot y un scatter plot en un solo gráfico. Se llama así, porque las curvas de densidad se asemejan a nubes y los puntos dispersos representados abajo parecen gotas de lluvia. Como en versiones anteriores que hemos elaborado más arriba, tenemos una representación sintética (una curva que describe la densidad o el comportamiento de los datos) y unos puntos que representa la posición aproximada de cada observación. En el siguiente gráfico, creamos un raincloud para la variable pop_65_older (población de 65 años o más) agrupada por el nivel de democracia de los países.\n\n\nCode\n# Carga los paquetes\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Creamos el gráfico, los datos son w, y las\n# variables: y=dem_level4 y x=pop_65_older,\n# el color es fill=dem_level4\np &lt;- ggplot(w,\n       aes(y = dem_level4, \n           x = pop_65_older, \n           fill = dem_level4)) \n\n# Ahora adiciona la geometría, \n# que incorpora los pujntos y\n# las líneas que identifica los\n# cuartiles\np &lt;- p + geom_density_ridges(\n              jittered_points = TRUE,\n              position = \"raincloud\",\n              alpha=0.6,                            \n              quantile_lines = TRUE)\n\n# Visualiza el resultado\np"
  },
  {
    "objectID": "tipos.html#asociación-o-correlación",
    "href": "tipos.html#asociación-o-correlación",
    "title": "Tiposde gráfico",
    "section": "Asociación o correlación",
    "text": "Asociación o correlación\nLos gráficos de asociación o correlación son útiles para visualizar la relación entre dos o más variables cuantitativas. Nos ayudan a identificar los vínculos entre fenómenos medidos de forma continua y formular hipótesis sobre su relación.\n\nDiagrama de dispersión\nUn diagrama de dispersión o scatterplot es una de las formas más sencillas y efectivas de visualizar la relación entre dos variables cuantitativas. Cada punto en el gráfico representa una observación y su posición en los ejes x e y indica los valores de las dos variables. Resulta tan común que su interpretación es bastante intuitiva. Permite, además, que añadamos dos o tres variables más, como el color, el tamaño o la forma de los puntos, para representar información adicional.\nEn el siguiente ejemplo, creamos un diagrama de dispersión para visualizar la relación entre la variable hdi (índice de desarrollo humano) y la variable dem_score14 (puntuación de democracia). Además, coloreamos los puntos según la religión mayoritaria (religoin), cada continente (regionun) estará representado por una forma distinta y definiremos el tamaño empleando el porcentaje de personas con 65 años o más (pop_65_older).\n\n\nCode\nlibrary(ggplot2)\n\n# Crea el gráfico\np &lt;- ggplot(w)\n\n# Capa estética con la religión\n# como color\np &lt;- p+ aes(x=hdi, \n            y=dem_score14,\n            color=religoin,\n            size=pop_65_older,\n            shape=regionun)\n\n\n# Capa geométrica\np &lt;- p +geom_point()\n\n# Visualiza el gráfico\np\n\n\n\n\n\nTenemos un gráfico verdaderamente horrible. No obstante, solo quería demostraros que es posible añadir más de dos variables a un diagrama de dispersión. En este caso, tenemos cinco: desarrollo humano, democracia, continente, religión y porcentaje de personas mayores de 65 años. Aunque se pueda hacer, como habéis visto, ni siempre es recomendable o útil. En este caso, la visualización resulta confusa y poco informativa. Por tanto, es mejor limitar el número de variables a dos o tres para que el gráfico sea más fácil de interpretar:\n\n\nCode\nlibrary(ggplot2)\n\n# Crea el gráfico\np &lt;- ggplot(w)\n\n# Capa estética con la religión\n# como color\np &lt;- p+ aes(x=hdi, \n            y=dem_score14,\n            color=religoin)\n\n\n# Capa geométrica\np &lt;- p +geom_point()\n\n# Visualiza el gráfico\np\n\n\n\n\n\n\n\nCorrelograma\n¿Qué pasa cuando queremos comparar el grado de asociación entre muchas variables cuantitativas de una sola vez? En este caso, el correlograma es una herramienta muy útil. Un correlograma es una matriz en la que cada celda representa el coeficiente de correlación entre dos variables. Los valores de la correlación pueden variar entre -1 y 1. Un valor de 1 indica una correlación positiva perfecta, un valor de -1 indica una correlación negativa perfecta y un valor de 0 indica que no hay correlación entre las variables. Los correlogramas son útiles para identificar patrones de correlación entre variables y seleccionar las variables más relevantes para un análisis más detallado.\nEn el siguiente ejemplo, creamos un correlograma para visualizar la correlación entre las variables gini10, dem_score14, literacy, lifeex_total, hdi, pop_urban, frac_eth y gdppcap08.\n\n\nCode\n# Carga el paquete necesario\nlibrary(ggcorrplot)\n\n# Crea una lista de variables\n# de interés\nvar &lt;- c(\"gini10\",\"dem_score14\",\n         \"literacy\",\"lifeex_total\",\n         \"hdi\",\"pop_urban\",\"frac_eth\",\n         \"gdppcap08\")\n\n# Calcula la matriz de correlación\ncorr &lt;- round(cor(w[,var], \n                  use=\"pairwise.complete.obs\"), \n              3)\n\n# Visualiza los resultados\nggcorrplot(corr, \n           lab_size = 3,\n           show.diag = F,\n           hc.order = T,\n           lab=T)\n\n\n\n\n\nEl patrón que emerge resulta claro: el fraccionamiento étnico (frac_eth) y el índice de desigualdad de renta (gini10) están negativamente correlacionados con todas las demás variables (que presentan una asociación positiva). Es decir, la fraccionalización étnica y la desigualdad no “casan” muy bien con la riqueza (gdppcap08), la urbanización (pop_urban), el desarrollo humano (hdi), la esperanza de vida (lifeex_total), la alfabetización (literacy) o la democracia (dem_score14)."
  },
  {
    "objectID": "tipos.html#conexión",
    "href": "tipos.html#conexión",
    "title": "Tiposde gráfico",
    "section": "Conexión",
    "text": "Conexión\nLos gráficos de conexión son útiles para visualizar datos de red. Nos permiten representar las relaciones entre diferentes entidades (nodos) y las interacciones entre ellas (vínculos). Los gráficos de conexión son útiles para visualizar flujos de información, rutas de transporte, relaciones comerciales, interpersonales, etc.\n\nRed\nUn gráfico de red o sociograma es una representación visual de una red social. Se compone de dos unidades básicas: los nodos (o vértices) y los vínculos (o aristas). Los nodos son los puntos de la red y pueden representar a individuos, organizaciones, países, ciudades, etc. Los vínculos son las conexiones entre ellos y pueden señalar relaciones de amistad, colaboración, intercambio. Puede ser una red de ciudades, de empresas, de personas, de páginas web, entre muchos otras aplicaciones.\nEn el siguiente ejemplo, creamos un gráfico de red para visualizar los flujos de visitas de la presidenta Dilma Rousseff entre diferentes ciudades de Brasil durante el mes anterior a las elecciónes presidenciales de 2014. La base de datos contiene información sobre el número de visitas entre diferentes ciudades, así como el número total de viajes realizados. Se ha obtenido a partir del análisis de los periódicos que cubrieron la campaña electoral.\n\n\nCode\n# Abre la base de datos\ndi &lt;- read.delim(\"https://www.dropbox.com/s/r8309gzg3rymajr/Visitas_Dilma_redux.csv?dl=1\", \n                 sep=\";\", \n                 dec=\",\")\n\n# Seleccoiona las variables\ndi &lt;- unique(di[,c(\"NOM_O\",\"NOM_D\",\n                   \"FREQ\",\"VISITS\")])\n\n\nnames(di) &lt;- c(\"Origen\",\"Destino\",\n               \"Viajes\",\"Visitas\")\n\n\n# Carga los paquetes\nlibrary(ggplot2)\nlibrary(ggnetwork)\n\n# Convierte la base de datos\n# en un layout de red\nn &lt;- ggnetwork(di)\n\n# Crea el gráfico con las\n# capas de datos y estética\np &lt;- ggplot(n, \n       aes(x = x, \n           y = y, \n           xend = xend, \n           yend = yend))\n\n# Añade la capa de vínculos (aristas)\np &lt;- p + geom_edges(\n          aes(size=Viajes),\n               color = \"red3\", \n               alpha=0.1,           \n               curvature = 0.25)    \n\n# Ahora, añade los puntos (nodos)\n# a la red anterior\np &lt;- p + geom_nodes(aes(size=Visitas), \n            color=\"red3\")\n\n# Adiciona los nombres de las ciudades\np &lt;- p + geom_nodetext_repel(\n  aes(\n    label = vertex.names))\n\n# Elimina el tema y la leyenda\np &lt;- p + theme_blank() +\n         theme(legend.position = \"none\")\n\n# Visualiza los resultados\np\n\n\n\n\n\nSe observa que la candidata se desplaza principalmente entre las ciudades de São Paulo, Brasília, Río de Janeiro y Porto Alegre. Los constantes regresos a Brasília revelan la necesidad de conciliar las agendas de candidata con la de presidenta. Río y São Paulo, por su parte, son los principales centros económicos y políticos del país, mientras que Porto Alegre es la ciudad natal de la candidata. Vemos también que ha visitado otras ciudades, pero estas ocupan un lugar más periférico en la red."
  },
  {
    "objectID": "tipos.html#tiempo-flujo-evolución",
    "href": "tipos.html#tiempo-flujo-evolución",
    "title": "Tiposde gráfico",
    "section": "Tiempo / Flujo / Evolución",
    "text": "Tiempo / Flujo / Evolución\nLos gráficos de tiempo o flujo son útiles para visualizar la evolución de una variable a lo largo del tiempo. Nos permiten identificar tendencias, patrones y ciclos en los datos. Entre las aplicaciones posibles encontramos las series temporales, flujos de información, movimientos de población, entre otros.\nPrepara la base de Brasil\n\n\nCode\nYear &lt;- c(1985:2019)\n\nGini &lt;- c(55.6,58.5,59.7,61.4,63.3,60.5,60.3,60.2,60.1,59.9,59.6,59.9,59.8,59.6,59.0,58.7,58.4,58.1,57.6,56.5,56.3,55.6,54.9,54.0,53.7,53.3,52.9,53.4,52.7,52.0,51.9,53.3,53.3,53.9,53.5)\n\nAdministration &lt;- c(\"Sarney\",\"Sarney\",\"Sarney\",\"Sarney\",\"Sarney\",\"Collor\",\"Collor\",\"Collor\",\"Itamar\",\"Itamar\",\"FHC\",\"FHC\",\"FHC\",\"FHC\",\"FHC\",\"FHC\",\"FHC\",\"FHC\",\"Lula\",\"Lula\",\"Lula\",\"Lula\",\"Lula\",\"Lula\",\"Lula\",\"Lula\",\"Dilma\",\"Dilma\",\"Dilma\",\"Dilma\",\"Dilma\",\"Dilma\",\"Temer\",\"Temer\",\"Bolsonaro\")\n\nGrowth &lt;- c(7.9,7.5,3.5,-0.1,3.2,-4.4,1.0,-0.5,4.9,5.9,4.2,2.2,3.4,0.3,0.5,4.4,1.4,3.1,1.1,5.8,3.2,4.0,6.1,5.1,-0.1,7.5,4.0,1.9,3.0,0.5,-3.5,-3.3,1.3,1.8,1.2)\n\nGDP &lt;- c(836,898,930,930,959,917,927,922,967,1024,1067,1090,1127,1131,1137,1186,1203,1240,1254,1326,1368,1423,1509,1586,1584,1703,1771,1805,1859,1868,1802,1743,1766,1798,1820)\n\nbr &lt;- data.frame(Year=Year, \n                 GDP=GDP, \n                 Growth=Growth, \n                 Gini=Gini, \n                 Administration=Administration)\n\n\nbrs &lt;- data.frame()\n\nfor(i in 1:nrow(br)){\n  \n  if (i&lt;nrow(br)){\n    k &lt;- i+1\n  }else{\n    k &lt;- i\n  }\n  \n  brs &lt;- rbind(brs,\n               data.frame(\n                      x1=br$Year[i],\n                    xend=br$Year[k],\n                      y1=br$Gini[i],\n                      yend=br$Gini[k],\n Administration=br$Administration[i])\n              )\n  \n}\n\nbrs2 &lt;- data.frame()\n\nfor(i in 1:nrow(br)){\n  \n  if (i&lt;nrow(br)){\n    k &lt;- i+1\n  }else{\n    k &lt;- i\n  }\n  \n  brs2 &lt;- rbind(brs2,\n               data.frame(\n                      x1=br$GDP[i],\n                    xend=br$GDP[k],\n                      y1=br$Gini[i],\n                      yend=br$Gini[k],\n Administration=br$Administration[i],\n                      Year=Year[i])\n              )\n  \n}\n\n\n\nLínea\nEl gráfico de líneas es una de las formas más comunes de visualizar datos temporales. Se compone de dos ejes: el eje horizontal representa el tiempo y el eje vertical la variable de interés. Se utiliza para visualizar la evolución de una variable a lo largo del tiempo, identificar tendencias, patrones y ciclos.\nEl código abajo muestra cómo crear un gráfico de líneas para visualizar la evolución del índice de desigualdad de renta en Brasil entre 1985 y 2019. La base de datos contiene información sobre el índice de Gini en Brasil, así como el año correspondiente. Se ha obtenido a partir de la base de datos del Banco Mundial.\n\n\nCode\n# Prepara el gráfico\np &lt;- ggplot(br, \n            aes(x=Year, y=Gini))+\n      geom_line()\n\n# Visualiza los resultados\np\n\n\n\n\n\n\n\nConnected scatterplot\nEl gráfico de dispersión conectado es una variante del gráfico de líneas que permite visualizar la relación entre dos variables a lo largo del tiempo. Se trata de conectar los puntos por medio de segmentos de línea para resaltar la evolución de la variable en el tiempo. El gráfico abajo muestra la evolución de la desigualdad en Brasil entre 1985 y 2019, pero ahora, marca los cambios de gobierno en el país.\n\n\nCode\n# Carga los paquetes\nlibrary(ggplot2)\nlibrary(ggrepel)\n\n# Crea el gráfico\np &lt;- ggplot(brs, \n            aes(x=Year, \n                y=Gini,\n                fill=Administration))\n\n# Añade segmentos de línea para\n# cada gobierno\np &lt;- p + geom_segment(\n                      aes(x=x1,\n                          xend=xend,\n                          y=y1,\n                          yend=yend,\n                          color=Administration))\n\n\n# Visualiza los resultados\np\n\n\n\n\n\n\n\nArea\nEl gráfico de área es una variante del gráfico de líneas que rellena el área entre la línea y el eje horizontal. El cambio puede parecer insignificante, pero posibilita la percepción de cambios importantes en volúmenes. En el ejemplo abajo, se muestra la evolución del crecimiento económico en Brasil entre 1985 y 2019.\n\n\nCode\n# Carga los paquetes\nlibrary(ggplot2)\n\n# Prepara el gráfico\np &lt;- ggplot(br, \n            aes(y=Growth, \n                x=Year))+\n      geom_area(fill=\"darkgreen\")\n\n\n# Visualiza los resultados\np\n\n\n\n\n\n\n\nDumbbell\nEl gráfico de pesas rusas (dumbbell) es una variante del gráfico de líneas que permite visualizar la evolución de dos variables a lo largo del tiempo. Se compone de dos o más puntos conectados por un segmento de línea. Es útil para comparar dos valores en diferentes momentos y visualizar la evolución de la variable en el tiempo. El gráfico abajo muestra la evolución de la proporción de la riqueza concentrada por el 10% más rico de en los países de América Latina en 2000, 2010 y 2019.\nPrimero, prepara los datos:\n\n\nCode\nlibrary(vdemdata)\n\ndem&lt;- vdem\n\ndm &lt;- dem[,c(\"country_name\",\"year\",\"v2x_polyarchy\",\"v2x_libdem\",\"v2x_partipdem\",\"v2x_delibdem\",\"v2x_egaldem\")]\n\nnames(dm) &lt;- c(\"Country\",\"Year\",\"Electoral\",\"Liberal\",\"Participative\",\"Deliberative\",\"Egalitarian\")\n\n\nco &lt;- c(\"Argentina\",\"Bolivia\",\"Brazil\",\"Chile\",\"Colombia\",\"Costa Rica\",\"Dominican Republic\",\"Ecuador\",\"Honduras\",\"Mexico\",\"Panama\",\"Peru\",\"Paraguay\",\"El Salvador\",\"Uruguay\")\n\ndml &lt;- dm[dm$Country%in%c(co,\"Nicaragua\",\"Venezuela\"),]\n\nye &lt;- c(rep(2000,length(co)),rep(2010,length(co)),\n        rep(2020,length(co)))\n\ntop &lt;- c(37.7,47.8,47,42.6,47,35.7,40.2,45.9,41.9,42,43.2,36.8,42.1,39,35.4,31.7,36.9,42.2,38.2,43.4,36.8,36.5,37.5,40.2,37.1,39.7,34.2,40.5,33.2,33.6,30.3,32.6,39.4,35.8,42.2,37,30.5,36,34.6,35.5,38,32.9,33.3,29.8,29.9)\n\nlat &lt;- data.frame(Country=c(co,co,co), Year=as.character(ye), Share=top)\n\n\nLuego, el gráfico:\n\n\nCode\n# Carga los paquetes\nlibrary(ggplot2)\n\n# Obtiene el orden de los países según\n# la proporción de riqueza apropiada por\n# los 10% más ricos (de los más a los menos).\nlevels &lt;- lat[\n              order(\n                lat$Share[lat$Year==2000], \n                decreasing = T),\n              c(\"Country\")]\n\n# Reordena la base de datos según los niveles\n# obtenidos en 2000 (esto es importante para que el \n# gráfico salga bonito y fácil de interpretar)\nlat$Country &lt;- factor(lat$Country, \n                      levels=levels)\n\n# Genera el gráfico\np &lt;- ggplot(lat,\n            aes(y=Country, \n                x=Share))\n\n# Adiciona los segmentos de línea\n# conectando cada período\np &lt;- p + geom_line(color=\"grey85\")\n\n# Añade puntos y los colorea de\n# acuerdo al año (Year)\np &lt;- p + geom_point(aes(color=Year))\n\n# Visualiza los resultados\np\n\n\n\n\n\nSe observa que la mayoría de los países han experimentado una reducción en la concentración de la riqueza en manos del 10% más rico, con excepción de Costa Rica, que ha experimentado un aumento en el mismo período. Resulta notable el caso de Bolivia, que ha experimentado una reducción significativa en la concentración de la riqueza en manos del 10% más rico en el período analizado, que pasa de ser el país más desigual al quinto menos desigual en la región en 2020."
  },
  {
    "objectID": "tipos.html#espacio",
    "href": "tipos.html#espacio",
    "title": "Tiposde gráfico",
    "section": "Espacio",
    "text": "Espacio\nLos gráficos espaciales son útiles para visualizar la distribución geográfica de una variable. Nos permiten identificar patrones, tendencias y relaciones espaciales en los datos. Entre las aplicaciones posibles encontramos la distribución de la población, la concentración de la riqueza, la distribución de la pobreza, entre otros.\n\nMapa de coropletas\nUn mapa de coropletas es una forma de visualización espacial que consiste en colorear áreas geográficas de acuerdo a una variable de interés. Es útil para visualizar la distribución geográfica de una variable y compararla entre diferentes áreas. En el ejemplo abajo, se muestra la distribución de los condados de Carolina del Norte según su área. Los condados más grandes se muestran en tonos más oscuros, mientras que los más pequeños aparecen más claros.\n\n\nCode\n# Carga los paquetes\nlibrary(ggthemes)\nlibrary(ggplot2)\nlibrary(sf)\n\n# Carga los datos de\n# los condados de Carolina \n# del Norte\nnc &lt;- st_read(system.file(\"shape/nc.shp\", \n                          package = \"sf\"), \n              quiet = TRUE)\n\n# Crea el gráfico y lo colorea\n# según el área\ngg &lt;- ggplot(nc) +\n  geom_sf(aes(fill = AREA))\n  \n# Visualiza los resultados  \ngg"
  }
]